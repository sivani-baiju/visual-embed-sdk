---
openapi: 3.0.0
servers:
  - url: "//<ThoughtSpot-Host>"
    description: Request URL
info:
  title: ThoughtSpot REST API v2 Documentation
  version: Beta
  x-logo:
    url: "https://raw.githubusercontent.com/thoughtspot/visual-embed-sdk/redoc-test/docs/src/assets/svg/ts-logo-black.svg"
    backgroundColor: "#F5F5F5"
    altText: "ThoughtSpot Logo"
  description: |
    **Note**: The REST API v2 Beta endpoints are deprecated from 9.0.0.cl onwards and can no longer be accessed from the ThoughtSpot API Playground.
    For more information, see <a href="https://developers.thoughtspot.com/docs/?pageid=deprecated-features" target="_blank">
    ThoughtSpot Developer documentation</a>.

    ### Overview
    This document provides information about the REST API v2(Beta) endpoints, request and response workflows.
    On the left pane, you can find a catalog of REST API v2(Beta) API endpoints, grouped based on the objects they operate on.
    The middle section of the portal provides a detailed description of the endpoint, its input fields,
    and allowed values for attributes.
    On the right panel, you can view the data format of the request and response.

    ### Request and response format
    For APIs that require data payload in the request body, you can find the request body sample on the right panel.
    You can copy the sample and replace it with actual values before passing the parameters in the request body.
    If GET requests allow query and path parameters in the request URL,
    make sure to add the correct query and path parameters.
    For example, for the GET user endpoint, the right panel shows the request URL as */tspublic/rest/v2/user*. To get details of a specific user,
    you must pass the user GUID or name as a query parameter in your API request.

    ### Errors
    The REST API v2 framework uses standard HTTP response codes to indicate the success or failure of a request.
    The 200 response code indicates a successful request, whereas the 500 and 4xx response codes indicate an error.

    ### Authentication
    All API requests to REST API v2 beta endpoints must include the Bearer token in the Authorization header.
    The token is generated for the logged-in user and is valid for 24 hours.
    To generate a new token, use the "/tspublic/rest/v2/session/gettoken endpoint".

tags: []
paths:
  "/tspublic/rest/v2/session":
    get:
      operationId: Get session information
      description: Get session object information.
      tags:
      - Session
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
      x-codeSamples:
        lang: cURL
        label: 'CURL'
        source: |-
          curl --request POST \
          --url 'https://{ThoughtSpot-Host}/tspublic/rest/v2/session' \
          -H 'Authorization: Bearer {OAUTH_TOKEN}' \
          -H 'Accept-Language: *' \
          -H 'Content-Type: application/json'

  "/tspublic/rest/v2/user":
    get:
      operationId: Get user
      description: To get the details of a specific user account by username or user
        id, use this endpoint. At Least one value is needed.  When both are given,
        user id will be considered to fetch user information.
      tags:
      - User
      parameters:
      - in: query
        name: name
        required: false
        schema:
          type: string
        description: Username of the user that you want to query.
        deprecated: false
      - in: query
        name: id
        required: false
        schema:
          type: string
        description: The GUID of the user account to query
        deprecated: false
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserResponse"
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
      x-codeSamples:
        lang: cURL
        label: 'CURL'
        source: |-
          curl --request GET \
          --url 'https://{ThoughtSpot-Host}/tspublic/rest/v2/user' \
          -H 'Authorization: Bearer {OAUTH_TOKEN}' \
          -H 'Accept-Language: *' \
          -H 'Content-Type: application/json'
          -d 'name=tsadmin'
  "/tspublic/rest/v2/group":
    get:
      operationId: Get group
      description: |-
        To get the details of a specific group by name or id, use this endpoint.
        At Least one value needed.  When both are given id will be considered to fetch user information.
      tags:
      - Group
      parameters:
      - in: query
        name: name
        required: false
        schema:
          type: string
        description: Name of the group
        deprecated: false
      - in: query
        name: id
        required: false
        schema:
          type: string
        description: The GUID of the group to query.
        deprecated: false
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GroupResponse"
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
      x-codeSamples:
        lang: cURL
        label: 'CURL'
        source: |-
          curl --request GET \
          --url 'https://{ThoughtSpot-Host}/tspublic/rest/v2/group' \
          -H 'Authorization: Bearer {OAUTH_TOKEN}' \
          -H 'Accept-Language: *' \
          -H 'Content-Type: application/json'
          -d 'name=administrator'
  "/tspublic/rest/v2/metadata/tag":
    get:
      operationId: Get tag
      description: To get details of a specific tag, use this endpoint. At least one
        of id or name of tag is required. When both are given, then id will be considered.
      tags:
      - Metadata
      parameters:
      - in: query
        name: name
        required: false
        schema:
          type: string
        description: Name of the tag
        deprecated: false
      - in: query
        name: id
        required: false
        schema:
          type: string
        description: The GUID of the tag
        deprecated: false
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MetadataTagResponse"
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/metadata/homeliveboard":
    get:
      operationId: Get home Liveboard
      description: To get the name and id of liveboard that is set as a home liveboard
        for a user, use this endpoint. At least one of user id or username is required.
        When both are given, then id will be considered.
      tags:
      - Metadata
      parameters:
      - in: query
        name: userName
        required: false
        schema:
          type: string
        description: Name of the tag
        deprecated: false
      - in: query
        name: userId
        required: false
        schema:
          type: string
        description: The GUID of the tag
        deprecated: false
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HomeLiveboardResponse"
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/metadata/header/search":
    post:
      operationId: Search object header
      description: To get header details for metadata objects, use this endpoint.
        You can provide as input selective fields to get the data for.
      tags:
      - Metadata
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                outputFields:
                  description: Array of header field names that need to be included
                    in the header response
                  type: array
                  items:
                    type: string
                  deprecated: false
                offset:
                  description: 'The batch offset, starting from where the records
                    should be included in the response. If no input is provided then
                    offset starts from 0. Default: 0'
                  default: 0
                  type: integer
                  format: int32
                  deprecated: false
                batchNumber:
                  description: "An alternate way to set offset for the starting point
                    of the response. \n\nThe value in offset field will not be considered
                    if batchNumber field has value greater than 0. \n\nOffset value
                    will be calculated as (batchNumber - 1) * batchSize. \n\nIt is
                    mandatory to provide a value for batchSize with batchNumber. \n\nExample:
                    \n\nAssume response has 100 records. Now,  batchNumber is set
                    as 2 and batchSize as 10, then offset value will be 10. So, 10
                    records starting from 11th record will be considered."
                  type: integer
                  format: int32
                  deprecated: false
                batchSize:
                  description: The number of records that should be included in the
                    response starting from offset position. If no input is provided
                    then first page is included in the response.
                  default: -1
                  type: integer
                  format: int32
                  deprecated: false
                sortBy:
                  description: Field based on which the response needs to be ordered.
                  default: DEFAULT
                  type: string
                  enum:
                  - DEFAULT
                  - NAME
                  - DISPLAY_NAME
                  - AUTHOR
                  - CREATED
                  - MODIFIED
                  - LAST_ACCESSED
                  - SYNCED
                  - VIEWS
                  - NONE
                  - USER_STATE
                  - ROW_COUNT
                  deprecated: false
                sortOrder:
                  description: Order in which sortBy should be applied.
                  default: DEFAULT
                  type: string
                  enum:
                  - DEFAULT
                  - ASC
                  - DESC
                  deprecated: false
                type:
                  description: Type of the metadata object being searched.
                  type: string
                  enum:
                  - ANSWER
                  - LIVEBOARD
                  - DATAOBJECT_ALL
                  - DATAOBJECT_WORKSHEET
                  - DATAOBJECT_TABLE
                  - DATAOBJECT_USER_DEFINED
                  - DATAOBJECT_VIEW
                  - DATAOBJECT_CALENDAR_TABLE
                  - COLUMN_ALL
                  - COLUMN_WORKSHEET
                  - COLUMN_TABLE
                  - COLUMN_USER_DEFINED
                  - COLUMN_VIEW
                  - COLUMN_CALENDAR_TABLE
                  - JOIN
                  - CONNECTION
                  - TAG
                  - USER
                  - USER_GROUP
                  deprecated: false
                namePattern:
                  description: A pattern to match the name of the metadata object.
                    This parameter supports matching case-insensitive strings. For
                    a wildcard match, use %.
                  type: string
                  deprecated: false
                fetchId:
                  description: A JSON array containing the GUIDs of the metadata objects
                    that you want to fetch.
                  type: array
                  items:
                    type: string
                  deprecated: false
                skipId:
                  description: A JSON array containing the GUIDs of the metadata objects
                    that you want to skip.
                  type: array
                  items:
                    type: string
                  deprecated: false
                showHidden:
                  description: When set to true, returns details of the hidden objects,
                    such as a column in a worksheet or a table.
                  default: false
                  type: boolean
                  deprecated: false
                autoCreated:
                  description: A flag to indicate whether to list only the auto created
                    objects. When no value is provided as input then all objects are
                    returned.
                  type: boolean
                  deprecated: false
                accessLevel:
                  description: |-
                    A JSON array of objects with user details for which the metadata objects should be considered from the repository
                    If you specify ID or name of user and set the type parameter to USER, the API returns metadata objects associated with the user
                    If you specify ID or name of user group and set the type parameter to USER_GROUP, the API returns metadata objects for all the users mapped to the specified user group.
                    If the id or name parameter is not defined, but the type attribute is set to USER or USER_GROUP, then the API will not return and response.
                    If no input is provided for any field for this object, then the API returns headers for all users.
                    If both name and id is provided, then id will be considered.
                  type: array
                  items:
                    "$ref": "#/components/schemas/AccessLevelInput"
                  deprecated: false
                tag:
                  description: A JSON array of name or GUID of tags or both. When
                    both are given then id is considered.
                  type: array
                  items:
                    "$ref": "#/components/schemas/TagNameAndIdInput"
                  deprecated: false
                favoriteFor:
                  description: A JSON array of name or GUID of the user or both for
                    whom the object is assigned as favorite. When both are given then
                    id is considered.
                  type: array
                  items:
                    "$ref": "#/components/schemas/NameAndIdInput"
                  deprecated: false
                author:
                  description: A JSON array of name or GUID of the user or both who
                    created the object. When both are given then id is considered
                  type: array
                  items:
                    "$ref": "#/components/schemas/NameAndIdInput"
                  deprecated: false
                lastModifiedBy:
                  description: A JSON array of name or GUID of the user or both who
                    last modified the object. When both are given then id is considered.
                  type: array
                  items:
                    "$ref": "#/components/schemas/NameAndIdInput"
                  deprecated: false
              required:
              - type
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/metadata/vizheader":
    get:
      operationId: Get object visualization header
      description: Use this endpoint to get header details of visualization charts
        for a given liveboard or answer. At least one of id or name of liveboard or
        answer is required. When both are given, then id will be considered.
      tags:
      - Metadata
      parameters:
      - in: query
        name: id
        required: true
        schema:
          type: string
        description: The GUID of the liveboard or answer
        deprecated: false
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/metadata/detail":
    get:
      operationId: Get object detail
      description: Use this endpoint to get full details of metadata objects
      tags:
      - Metadata
      parameters:
      - in: query
        name: type
        required: true
        schema:
          type: string
          enum:
          - ANSWER
          - LIVEBOARD
          - DATAOBJECT
          - COLUMN
          - JOIN
          - CONNECTION
          - TAG
          - USER
          - USER_GROUP
        description: Type of the metadata object being searched.
        deprecated: false
      - in: query
        name: id
        required: true
        schema:
          type: array
          items:
            type: string
        description: A JSON array of GUIDs of the objects.
        deprecated: false
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/metadata/header":
    get:
      operationId: Get object header
      description: To get header detail of a metadata object, use this endpoint. You
        can provide as input selective fields to get the data for.
      tags:
      - Metadata
      parameters:
      - in: query
        name: type
        required: true
        schema:
          type: string
          enum:
          - ANSWER
          - LIVEBOARD
          - DATAOBJECT_ALL
          - DATAOBJECT_WORKSHEET
          - DATAOBJECT_TABLE
          - DATAOBJECT_USER_DEFINED
          - DATAOBJECT_VIEW
          - DATAOBJECT_CALENDAR_TABLE
          - COLUMN_ALL
          - COLUMN_WORKSHEET
          - COLUMN_TABLE
          - COLUMN_USER_DEFINED
          - COLUMN_VIEW
          - COLUMN_CALENDAR_TABLE
          - JOIN
          - CONNECTION
          - TAG
          - USER
          - USER_GROUP
        description: Type of the metadata object being searched.
        deprecated: false
      - in: query
        name: id
        required: true
        schema:
          type: string
        description: GUID of the metadata object
        deprecated: false
      - in: query
        name: outputFields
        required: false
        schema:
          type: array
          items:
            type: string
        description: Array of header field names that need to be included in the header
          response
        deprecated: false
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/metadata/detail/search":
    post:
      operationId: Search object detail
      description: Use this endpoint to get full details of metadata objects
      tags:
      - Metadata
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  description: Type of the metadata object being searched.
                  type: string
                  enum:
                  - ANSWER
                  - LIVEBOARD
                  - DATAOBJECT
                  - COLUMN
                  - JOIN
                  - CONNECTION
                  - TAG
                  - USER
                  - USER_GROUP
                  deprecated: false
                id:
                  description: A JSON array of GUIDs of the objects.
                  type: array
                  items:
                    type: string
                  deprecated: false
                showHidden:
                  description: When set to true, returns details of the hidden objects,
                    such as a column in a worksheet or a table.
                  default: false
                  type: boolean
                  deprecated: false
                dropQuestionDetails:
                  description: When set to true, the search assist data associated
                    with a worksheet is not included in the API response. This attribute
                    is applicable only for DATAOBJECT data type.
                  default: false
                  type: boolean
                  deprecated: false
                version:
                  description: Specify the version to retrieve the objects from. By
                    default, the API returns metadata for all versions of the object.
                  type: string
                  deprecated: false
              required:
              - type
              - id
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/database/schema":
    get:
      operationId: Get schemas
      description: To list all the schemas in a database in Falcon, use this endpoint.
      tags:
      - Database
      parameters:
      - in: query
        name: database
        required: true
        schema:
          type: string
        description: Name of the Falcon database
        deprecated: false
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/database/table":
    get:
      operationId: Get tables
      description: To list all the tables in a schema of a database in Falcon, use
        this endpoint.
      tags:
      - Database
      parameters:
      - in: query
        name: database
        required: true
        schema:
          type: string
        description: Name of the Falcon database
        deprecated: false
      - in: query
        name: schema
        required: true
        schema:
          type: string
        description: Name of the schema in Falcon database
        deprecated: false
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/database/table/detail":
    get:
      operationId: Get table details
      description: "Note: This endpoint is applicable only for on-prem deployments.
        \n\nTo provide details of a table in a schema of a database in Falcon, use
        this endpoint."
      tags:
      - Database
      parameters:
      - in: query
        name: database
        required: true
        schema:
          type: string
        description: Name of the Falcon database
        deprecated: false
      - in: query
        name: schema
        required: false
        schema:
          type: string
        description: Name of the schema in Falcon database
        deprecated: false
      - in: query
        name: table
        required: true
        schema:
          type: string
        description: Name of the table in Falcon database
        deprecated: false
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/connection":
    get:
      operationId: Get connection
      description: To get the details of a specific connection use this endpoint
      tags:
      - Connection
      parameters:
      - in: query
        name: id
        required: true
        schema:
          type: string
        description: The GUID of the connection to query
        deprecated: false
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ConnectionResponse"
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/connection/database":
    get:
      operationId: Get connection database
      description: "To get the list of databases for a connection, use this endpoint.
        \n\nThe response will include databases from the data platform corresponding
        to the connection id provided."
      tags:
      - Connection
      parameters:
      - in: query
        name: id
        required: true
        schema:
          type: string
        description: The GUID of the connection
        deprecated: false
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/data/search":
    post:
      operationId: Search query data
      description: To programmatically retrieve data from ThoughtSpot using search
        query string, use this endpoint
      tags:
      - Data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                offset:
                  description: "The offset point, starting from where the records
                    should be included in the response. \n\nIf no input is provided
                    then offset starts from 0."
                  default: -1
                  type: integer
                  format: int32
                  deprecated: false
                batchNumber:
                  description: "An alternate way to set offset for the starting point
                    of the response. \n\nThe value in offset field will not be considered
                    if batchNumber field has value greater than 0. \n\nOffset value
                    will be calculated as (batchNumber - 1) * batchSize. \n\nIt is
                    mandatory to provide a value for batchSize with batchNumber. \n\nExample:
                    \n\nAssume response has 100 records. Now,  batchNumber is set
                    as 2 and batchSize as 10, then offset value will be 10. So, 10
                    records starting from 11th record will be considered."
                  default: -1
                  type: integer
                  format: int32
                  deprecated: false
                batchSize:
                  description: "The number of records that should be included in the
                    response starting from offset position. \n\nIf no input is provided,
                    then all records starting from the value provided in offset is
                    included in the response"
                  default: -1
                  type: integer
                  format: int32
                  deprecated: false
                queryString:
                  description: 'The data search query string. Example: [revenue] >
                    1000 [ship mode] = ''air'''
                  type: string
                  deprecated: false
                dataObjectId:
                  description: The GUID of the data object, either a worksheet, a
                    view, or a table.
                  type: string
                  deprecated: false
                formatType:
                  description: "The format of the data in the response. \n\nFULL:
                    The response comes in \"column\":\"value\" format. \n\nCOMPACT:
                    The response includes only the value of the columns."
                  default: COMPACT
                  type: string
                  enum:
                  - COMPACT
                  - FULL
                  deprecated: false
              required:
              - queryString
              - dataObjectId
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/data/liveboard":
    post:
      operationId: Liveboard data
      description: To retrieve data related to a Liveboard or visualization from the
        ThoughtSpot system, you can use this endpoint
      tags:
      - Data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                offset:
                  description: "The offset point, starting from where the records
                    should be included in the response. \n\nIf no input is provided
                    then offset starts from 0."
                  default: 0
                  type: integer
                  format: int32
                  deprecated: false
                batchNumber:
                  description: "An alternate way to set offset for the starting point
                    of the response. \n\nThe value in offset field will not be considered
                    if batchNumber field has value greater than 0. \n\nOffset value
                    will be calculated as (batchNumber - 1) * batchSize. \n\nIt is
                    mandatory to provide a value for batchSize with batchNumber. \n\nExample:
                    \n\nAssume response has 100 records. Now,  batchNumber is set
                    as 2 and batchSize as 10, then offset value will be 10. So, 10
                    records starting from 11th record will be considered."
                  default: -1
                  type: integer
                  format: int32
                  deprecated: false
                batchSize:
                  description: "The number of records that should be included in the
                    response starting from offset position. \n\nIf no input is provided,
                    then all records starting from the value provided in offset is
                    included in the response"
                  default: -1
                  type: integer
                  format: int32
                  deprecated: false
                id:
                  description: The GUID of the Liveboard
                  type: string
                  deprecated: false
                transientContent:
                  description: If you have embedded ThoughtSpot in your host application,
                    and you want to download Liveboard data with unsaved changes then,
                    pass the transient content from the browser fetch request, using
                    the getExportRequestForCurrentPinboard method. For more information,
                    see https://developers.thoughtspot.com/docs/?pageid=liveboard-export-api#transient-pinboard
                    . If value for this field is provided, then id will not be considered.
                  type: string
                  deprecated: false
                vizId:
                  description: A JSON array of GUIDs of the visualizations in the
                    Liveboard.
                  type: array
                  items:
                    type: string
                  deprecated: false
                runtimeFilter:
                  description: "JSON object which contains filter condition to filter
                    the data at the time of data retrieval. \n\nExample: {\"col1\":\"region\",\"op1\":\"EQ\",\"val1\":\"northeast\",\"col2\":\"date\",\"op2\":\"BET\",\"val2\":[\"1625126400000\",\"1625126400000\"]}
                    \n\nFor more information, see https://developers.thoughtspot.com/docs/?pageid=runtime-filters"
                  type: string
                  deprecated: false
                runtimeSort:
                  description: "JSON object which provides columns to sort the data
                    at the time of data retrieval. \n\nExample: {\"sortCol1\":\"region\",\"asc1\":true,\"sortCol2\":\"date\"}
                    \n\nFor more information, see https://developers.thoughtspot.com/docs/?pageid=runtime-filters."
                  type: string
                  deprecated: false
                formatType:
                  description: "The format of the data in the response. \n\nFULL:
                    The response comes in \"column\":\"value\" format. \n\nCOMPACT:
                    The response includes only the value of the columns."
                  default: COMPACT
                  type: string
                  enum:
                  - COMPACT
                  - FULL
                  deprecated: false
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/data/answer":
    post:
      operationId: Answer data
      description: To retrieve data related to a Answer from the ThoughtSpot system,
        you can use this endpoint
      tags:
      - Data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                offset:
                  description: "The offset point, starting from where the records
                    should be included in the response. \n\nIf no input is provided
                    then offset starts from 0."
                  default: 0
                  type: integer
                  format: int32
                  deprecated: false
                batchNumber:
                  description: "An alternate way to set offset for the starting point
                    of the response. \n\nThe value in offset field will not be considered
                    if batchNumber field has value greater than 0. \n\nOffset value
                    will be calculated as (batchNumber - 1) * batchSize. \n\nIt is
                    mandatory to provide a value for batchSize with batchNumber. \n\nExample:
                    \n\nAssume response has 100 records. Now,  batchNumber is set
                    as 2 and batchSize as 10, then offset value will be 10. So, 10
                    records starting from 11th record will be considered."
                  default: -1
                  type: integer
                  format: int32
                  deprecated: false
                batchSize:
                  description: "The number of records that should be included in the
                    response starting from offset position. \n\nIf no input is provided,
                    then all records starting from the value provided in offset is
                    included in the response"
                  default: -1
                  type: integer
                  format: int32
                  deprecated: false
                id:
                  description: The GUID of the Answer
                  type: string
                  deprecated: false
                formatType:
                  description: "The format of the data in the response. \n\nFULL:
                    The response comes in \"column\":\"value\" format. \n\nCOMPACT:
                    The response includes only the value of the columns."
                  default: COMPACT
                  type: string
                  enum:
                  - COMPACT
                  - FULL
                  deprecated: false
              required:
              - id
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/data/answer/querysql":
    get:
      operationId: Answer query SQL
      description: To retrieve the query SQL related to an Answer that is run on the
        data platform, you can use this endpoint
      tags:
      - Data
      parameters:
      - in: query
        name: id
        required: true
        schema:
          type: string
        description: The GUID of the Answer
        deprecated: false
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AnswerQueryResponse"
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/data/liveboard/querysql":
    get:
      operationId: Liveboard query SQL
      description: To retrieve the query SQL related to a Visualization in a Liveboard
        that is run on the data platform, you can use this endpoint
      tags:
      - Data
      parameters:
      - in: query
        name: id
        required: true
        schema:
          type: string
        description: The GUID of the Answer
        deprecated: false
      - in: query
        name: vizId
        required: false
        schema:
          type: array
          items:
            type: string
        description: A JSON array of GUIDs of the visualizations in the Liveboard.
        deprecated: false
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/LiveboardQueryResponse"
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/logs/events":
    get:
      operationId: Get log events
      description: "Note: This endpoint is applicable only to ThoughtSpot Cloud deployments.
        \n\nThe ThoughtSpot log streaming service API allows you to programmatically
        get a security audit event log from the ThoughtSpot system. \n\nTo use this
        API, make sure you have admin user privileges. \n\nThoughtSpot cloud deployments
        allow you to collect security audit events and send them to your Security
        information and event management (SIEM) application in real-time. \n\nThese
        events can help your security operations personnel to detect potential security
        threats or compromised user accounts in your organization."
      tags:
      - Logs
      parameters:
      - in: query
        name: topic
        required: true
        schema:
          type: string
          enum:
          - security_logs
        description: Type of the log
        deprecated: false
      - in: query
        name: fromEpoch
        required: false
        schema:
          type: string
        description: "The EPOCH time in milliseconds to set the start time for streaming
          logs. \n\nExample: To set the timestamp as June 1, 2021 8 am, specify 1622534400000."
        deprecated: false
      - in: query
        name: toEpoch
        required: false
        schema:
          type: string
        description: "The EPOCH time in milliseconds to set the end time for streaming
          logs. \n\nExample: To set the timestamp as July 1, 2021, 8 am, specify 1625126400000."
        deprecated: false
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/LogsResponse"
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/customaction":
    get:
      operationId: Get custom action
      description: To get details of a specific custom action configured in the ThoughtSpot
        system, use this endpoint
      tags:
      - CustomActions
      parameters:
      - in: query
        name: id
        required: true
        schema:
          type: string
        description: GUID of the custom action
        deprecated: false
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/customaction/search":
    post:
      operationId: Search custom action
      description: To search custom actions available on a ThoughtSpot instance, use
        this endpoint
      tags:
      - CustomActions
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tag:
                  description: "A JSON array of tag GUIDs. \n\nIf tags are applied
                    to worksheets, search answers, or Liveboard visualizations, and
                    custom actions are associated to these objects, you can use this
                    parameter to filter the custom action data by tags."
                  type: array
                  items:
                    type: string
                  deprecated: false
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/customaction/association":
    get:
      operationId: Get custom action association
      description: ThoughtSpot supports associating custom actions to Liveboards,
        answers, and worksheets. To get the details of the ThoughtSpot objects associated
        with a custom action, use this endpoint.
      tags:
      - CustomActions
      parameters:
      - in: query
        name: id
        required: true
        schema:
          type: string
        description: GUID of the custom action
        deprecated: false
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/security/permission/tsobject":
    get:
      operationId: Get permission on object
      description: "To list the permissions for user and user groups on an object,
        use this endpoint. The response will include only those users and groups with
        have either VIEW OR MODIFY permission. \n\nYou can optionally see the permission
        on the dependent objects as well by enabling includeDependent field."
      tags:
      - Security
      parameters:
      - in: query
        name: id
        required: true
        schema:
          type: string
        description: GUID of the metadata object for which the permission needs to
          be obtained.
        deprecated: false
      - in: query
        name: type
        required: true
        schema:
          type: string
          enum:
          - LIVEBOARD
          - ANSWER
          - DATAOBJECT
          - COLUMN
        description: 'Type of metadata object. Valid values: Liveboard|Answer|DataObject|Column'
        deprecated: false
      - in: query
        name: includeDependent
        required: false
        schema:
          type: boolean
        description: When this field is set to true, the API returns the permission
          details for the dependent objects for the the object included in the request
        default: false
        deprecated: false
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SecurityPermissionResponse"
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/security/permission/principal":
    get:
      operationId: Get permission for principal
      description: "Use this endpoint to list the objects on which a user or user
        group has permission. The response will include only those objects on which
        the user or user group has either VIEW OR MODIFY permission. \n\nRequires
        administration privilege"
      tags:
      - Security
      parameters:
      - in: query
        name: id
        required: false
        schema:
          type: string
        description: GUID of the user or user group for which the object permission
          needs to be obtained
        deprecated: false
      - in: query
        name: name
        required: false
        schema:
          type: string
        description: Name of the ser or user group for which the object permission
          needs to be obtained
        deprecated: false
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PrincipalSearchResponse"
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/session/login":
    post:
      operationId: Login
      description: "You can programmatically create login session for a user in ThoughtSpot
        using this endpoint. \n\nYou can create session by either providing userName
        and password as inputs in this request body or by including \"Authorization\"
        header with the token generated through the endpoint /tspublic/rest/v2/session/gettoken.
        \n\nuserName and password input is given precedence over \"Authorization\"
        header, when both are included in the request."
      tags:
      - Session
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  description: Username of the user account
                  type: string
                  deprecated: false
                password:
                  description: The password of the user account
                  type: string
                  deprecated: false
                rememberMe:
                  description: A flag to remember the user session. When set to true,
                    sets a session cookie that persists in subsequent API calls.
                  type: boolean
                  deprecated: false
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SessionLoginResponse"
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/session/gettoken":
    post:
      operationId: Get token
      description: " To programmatically create session token for a user in ThoughtSpot,
        use this endpoint. \n\nYou can generate the token for a user by providing
        password or secret key from the cluster. \n\nYou need to enable trusted authentication
        to generate secret key. To generate secret key, follow below steps. \n\n\n
        1. Click the Develop tab. \n\n\n 2. Under Customizations, click Settings.
        \n\n\n 3. To enable trusted authentication, turn on the toggle. \n\n\n 4.
        A secret_key for trusted authentication is generated. \n\n\n 5. Click the
        clipboard icon to copy the token. \n\n\n \n\nPassword is given precedence
        over secretKey input, when both are included in the request."
      tags:
      - Session
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  description: Username of the user account
                  type: string
                  deprecated: false
                password:
                  description: The password of the user account
                  type: string
                  deprecated: false
                secretKey:
                  description: The secret key string provided by the ThoughtSpot application
                    server. ThoughtSpot generates this secret key when you enable
                    trusted authentication.
                  type: string
                  deprecated: false
                accessLevel:
                  description: "User access privilege. \n\nFULL - Creates a session
                    with full access. \n\nREPORT_BOOK_VIEW - Allow view access to
                    the specified visualizations."
                  default: FULL
                  type: string
                  enum:
                  - FULL
                  - REPORT_BOOK_VIEW
                  deprecated: false
                tsObjectId:
                  description: GUID of the ThoughtSpot object. If you have set the
                    accessLevel attribute to REPORT_BOOK_VIEW, specify the GUID of
                    the Liveboard or visualization object.
                  type: string
                  deprecated: false
                tokenExpiryDuration:
                  description: Duration in seconds after which the token expires
                  type: string
                  deprecated: false
                #orgId:
                  #description: Id of the organization to be associated with the user
                    #login. If no input is provided then last logged in organization
                    #will be considered
                  #type: string
                  #deprecated: false
              required:
              - userName
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SessionLoginResponse"
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/session/logout":
    post:
      operationId: Logout
      description: To log a user out of the current session, use this endpoint
      tags:
      - Session
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/session/revoketoken":
    post:
      operationId: Revoke token
      description: To expire or revoke a token for a user, use this endpoint
      tags:
      - Session
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/user/create":
    post:
      operationId: Create user
      description: |-
        To programmatically create a user account in the ThoughtSpot system use this API endpoint. Using this API, you can create a user and assign groups.
        To create a user, you require admin user privileges.
        All users created in the ThoughtSpot system are added to ALL_GROUP
      tags:
      - User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: Name of the user. The username string must be unique.
                  type: string
                  deprecated: false
                displayName:
                  description: A unique display name string for the user account,
                    usually their first and last name
                  type: string
                  deprecated: false
                visibility:
                  description: Visibility of the user. The visibility attribute is
                    set to DEFAULT when creating a user. The DEFAULT attribute makes
                    a user visible to other users and user groups, and this allows
                    them to share objects
                  default: DEFAULT
                  type: string
                  enum:
                  - DEFAULT
                  - NON_SHARABLE
                  - SHARABLE
                  deprecated: false
                mail:
                  description: Email of the user account
                  type: string
                  deprecated: false
                password:
                  description: Password for the user account.
                  type: string
                  deprecated: false
                #orgIds:
                  #description: Array of org identifiers. If no value is provided then
                    #user will be created in the organization associated with the login
                    #session.
                  #type: array
                  #items:
                    #type: integer
                    #format: int32
                  #deprecated: false
                groups:
                  description: Array of objects of groups that the user belong to.
                  type: array
                  items:
                    "$ref": "#/components/schemas/GroupNameAndIDInput"
                  deprecated: false
                state:
                  description: Status of user account. acitve or inactive.
                  default: ACTIVE
                  type: string
                  enum:
                  - ACTIVE
                  - INACTIVE
                  - EXPIRED
                  - LOCKED
                  - PENDING
                  deprecated: false
                notifyOnShare:
                  description: User preference for receiving email notifications when
                    another ThoughtSpot user shares answers or pinboards.
                  default: true
                  type: boolean
                  deprecated: false
                showWalkMe:
                  description: The user preference for revisiting the onboarding experience.
                  default: true
                  type: boolean
                  deprecated: false
                analystOnboardingComplete:
                  description: ThoughtSpot provides an interactive guided walkthrough
                    to onboard new users. The onboarding experience leads users through
                    a set of actions to help users get started and accomplish their
                    tasks quickly. The users can turn off the Onboarding experience
                    and access it again when they need assistance with the ThoughtSpot
                    UI.
                  default: false
                  type: boolean
                  deprecated: false
                type:
                  description: Type of user. LOCAL_USER indicates that the user is
                    created locally in the ThoughtSpot system.
                  default: LOCAL_USER
                  type: string
                  enum:
                  - UNKNOWN
                  - LDAP_USER
                  - SAML_USER
                  - OIDC_USER
                  - LOCAL_USER
                  deprecated: false
              required:
              - name
              - displayName
              - password
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserResponse"
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/user/update":
    put:
      operationId: Update user
      description: |-
        You can use this endpoint to programmatically modify an existing user account.  To modify a user, you require admin user privileges.
        At least one of User Id or username is mandatory. When both are given, then user id will be considered and username will be updated
      tags:
      - User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: Name of the user. The username string must be unique.
                  type: string
                  deprecated: false
                id:
                  description: The GUID of the user account to query
                  type: string
                  deprecated: false
                displayName:
                  description: A unique display name string for the user, usually
                    their first and last name.
                  type: string
                  deprecated: false
                visibility:
                  description: Visibility of the user account. The visibility attribute
                    is set to DEFAULT when creating a user. The DEFAULT attribute
                    makes a user visible to other users and user groups, and thus
                    allows them to share objects.
                  default: DEFAULT
                  type: string
                  enum:
                  - DEFAULT
                  - NON_SHARABLE
                  - SHARABLE
                  deprecated: false
                mail:
                  description: email of the user.
                  type: string
                  deprecated: false
                state:
                  description: Status of user account. acitve or inactive.
                  default: ACTIVE
                  type: string
                  enum:
                  - ACTIVE
                  - INACTIVE
                  - EXPIRED
                  - LOCKED
                  - PENDING
                  deprecated: false
                notifyOnShare:
                  description: User preference for receiving email notifications when
                    another ThoughtSpot user shares answers or pinboards.
                  default: true
                  type: boolean
                  deprecated: false
                showWalkMe:
                  description: The user preference for revisiting the onboarding experience.
                  default: true
                  type: boolean
                  deprecated: false
                analystOnboardingComplete:
                  description: ThoughtSpot provides an interactive guided walkthrough
                    to onboard new users. The onboarding experience leads users through
                    a set of actions to help users get started and accomplish their
                    tasks quickly. The users can turn off the Onboarding experience
                    and access it again when they need assistance with the ThoughtSpot
                    UI.
                  default: false
                  type: boolean
                  deprecated: false
                type:
                  description: Type of user. LOCAL_USER indicates that the user is
                    created locally in the ThoughtSpot system.
                  default: LOCAL_USER
                  type: string
                  enum:
                  - UNKNOWN
                  - LDAP_USER
                  - SAML_USER
                  - OIDC_USER
                  - LOCAL_USER
                  deprecated: false
                groups:
                  description: Array of objects of groups that the user belong to.
                  type: array
                  items:
                    "$ref": "#/components/schemas/GroupNameAndIDInput"
                  deprecated: false
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/user/delete":
    delete:
      operationId: Delete user
      description: |-
        To remove a user from the ThoughtSpot system, use this endpoint.
        At Least one value needed.  When both are given user id will be considered to delete user.
      tags:
      - User
      parameters:
      - in: query
        name: name
        required: false
        schema:
          type: string
        description: Username of the user that you want to query.
        deprecated: false
      - in: query
        name: id
        required: false
        schema:
          type: string
        description: The GUID of the user account to query
        deprecated: false
      #- in: query
        #name: orgId
        #required: false
        #schema:
          #type: integer
          #format: int32
        #description: Unique identifier of the organization from which the user would
          #be deleted. If no value is provided then user will be deleted from the organization
          #associated with the login session.
        #deprecated: false
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/user/addgroup":
    put:
      operationId: Add user to groups
      description: |-
        To programmatically add groups to an existing ThoughtSpot user use this endpoint.
        When you assign groups to a user, the user inherits the privileges assigned to those groups.
        At least one of User Id or username is mandatory. When both are given, then user id will be considered.
      tags:
      - User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: User name of the user account
                  type: string
                  deprecated: false
                id:
                  description: The GUID of the user account
                  type: string
                  deprecated: false
                groups:
                  description: Array of objects of groups that the user belong to.
                  type: array
                  items:
                    "$ref": "#/components/schemas/GroupNameAndIDInput"
                  deprecated: false
              required:
              - groups
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/user/removegroup":
    put:
      operationId: Remove user from groups
      description: |-
        To programmatically remove groups from an existing ThoughtSpot user, use this API endpoint.
        The API removes only the user association. It does not delete the user or group from the Thoughtspot system
        At least one of User Id or username is mandatory. When both are given, then user id will be considered.
      tags:
      - User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: User name of the user account
                  type: string
                  deprecated: false
                id:
                  description: The GUID of the user account
                  type: string
                  deprecated: false
                groups:
                  description: Array of objects of groups that the user belong to.
                  type: array
                  items:
                    "$ref": "#/components/schemas/GroupNameAndIDInput"
                  deprecated: false
              required:
              - groups
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/user/search":
    post:
      operationId: Search users
      description: To get the details of a specific user account or all users in the
        ThoughtSpot system use this end point.
      tags:
      - User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                outputFields:
                  description: Array of field names that need to be included in the
                    response
                  type: array
                  items:
                    type: string
                  deprecated: false
                name:
                  description: User name of the user account
                  type: string
                  deprecated: false
                id:
                  description: The GUID of the user account
                  type: string
                  deprecated: false
                displayName:
                  description: A unique display name string for the user, usually
                    their first and last name.
                  type: string
                  deprecated: false
                visibility:
                  description: Visibility of the user account. The visibility attribute
                    is set to DEFAULT when creating a user. The DEFAULT attribute
                    makes a user visible to other users and user groups, and thus
                    allows them to share objects.
                  type: string
                  deprecated: false
                mail:
                  description: email of the user.
                  type: string
                  deprecated: false
                groups:
                  description: Array of objects of groups that the user belong to.
                  type: array
                  items:
                    "$ref": "#/components/schemas/GroupNameAndIDInput"
                  deprecated: false
                privileges:
                  description: Privileges assigned to user account
                  type: array
                  items:
                    type: string
                    enum:
                    - RANALYSIS
                    - DATAMANAGEMENT
                    - APPLICATION_ADMINISTRATION
                    - USER_ADMINISTRATION
                    - SYSTEMMANAGEMENT
                    - SYSTEM_INFO_ADMINISTRATION
                    - AUTHORING
                    - BACKUP_ADMINISTRATION
                    - SHAREWITHALL
                    - DEVELOPER
                    - JOBSCHEDULING
                    - GROUP_ADMINISTRATION
                    - BYPASSRLS
                    - EXPERIMENTALFEATUREPRIVILEGE
                    - A3ANALYSIS
                    - USERDATAUPLOADING
                    - DATADOWNLOADING
                    - DISABLE_PINBOARD_CREATION
                    - ADMINISTRATION
                  deprecated: false
                state:
                  description: Status of user account. acitve or inactive.
                  type: string
                  deprecated: false
                notifyOnShare:
                  description: User preference for receiving email notifications when
                    another ThoughtSpot user shares answers or pinboards.
                  type: boolean
                  deprecated: false
                showWalkMe:
                  description: The user preference for revisiting the onboarding experience.
                  type: boolean
                  deprecated: false
                analystOnboardingComplete:
                  description: ThoughtSpot provides an interactive guided walkthrough
                    to onboard new users. The onboarding experience leads users through
                    a set of actions to help users get started and accomplish their
                    tasks quickly. The users can turn off the Onboarding experience
                    and access it again when they need assistance with the ThoughtSpot
                    UI.
                  type: boolean
                  deprecated: false
                type:
                  description: Type of user. LOCAL_USER indicates that the user is
                    created locally in the ThoughtSpot system.
                  type: string
                  deprecated: false
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/user/changepassword":
    put:
      operationId: Change password of user
      description: "To change the password of a ThoughtSpot user account, use this
        endpoint. \n\nAt least one of id or name of user is required. When both are
        given user id will be considered."
      tags:
      - User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: User name of the user account.
                  type: string
                  deprecated: false
                id:
                  description: The GUID of the user account to query.
                  type: string
                  deprecated: false
                currentPassword:
                  description: The current password of the user.
                  type: string
                  deprecated: false
                newPassword:
                  description: A new password for the user.
                  type: string
                  deprecated: false
              required:
              - currentPassword
              - newPassword
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/group/create":
    post:
      operationId: Create group
      description: To programmatically create a group in the ThoughtSpot system, use
        this API endpoint. Using this API, you can create a group and assign privileges
        and users. For ease of user management and access control, ThoughtSpot administrators
        can create groups and assign privileges to these groups. The privileges determine
        the actions that the users belonging to a group are allowed to do. ThoughtSpot
        also has a default group called ALL_GROUP. When you create new group in ThoughtSpot,
        they are automatically added to ALL_GROUP. You cannot delete the ALL_GROUP
        or remove members from it.
      tags:
      - Group
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: Name of the user group. The group name string must
                    be unique.
                  type: string
                  deprecated: false
                displayName:
                  description: A unique display name string for the user group, for
                    example, Developer group.
                  type: string
                  deprecated: false
                visibility:
                  description: Visibility of the user group. The visibility attribute
                    is set to DEFAULT. The DEFAULT attribute makes the user group
                    visible for other user groups and allows them to share objects.
                  default: DEFAULT
                  type: string
                  enum:
                  - DEFAULT
                  - NON_SHARABLE
                  - SHARABLE
                  deprecated: false
                description:
                  description: Description text for the group.
                  type: string
                  deprecated: false
                privileges:
                  description: A JSON array of privileges assigned to the group
                  type: array
                  items:
                    type: string
                    enum:
                    - RANALYSIS
                    - DATAMANAGEMENT
                    - APPLICATION_ADMINISTRATION
                    - USER_ADMINISTRATION
                    - SYSTEMMANAGEMENT
                    - SYSTEM_INFO_ADMINISTRATION
                    - AUTHORING
                    - BACKUP_ADMINISTRATION
                    - SHAREWITHALL
                    - DEVELOPER
                    - JOBSCHEDULING
                    - GROUP_ADMINISTRATION
                    - BYPASSRLS
                    - EXPERIMENTALFEATUREPRIVILEGE
                    - A3ANALYSIS
                    - USERDATAUPLOADING
                    - DATADOWNLOADING
                    - DISABLE_PINBOARD_CREATION
                    - ADMINISTRATION
                  deprecated: false
                #orgId:
                  #description: Unique identifier of the organization. If no value
                    #is provided then group will be created in the organization associated
                    #with the login session.
                  #type: integer
                  #format: int32
                  #deprecated: false
                groups:
                  description: Array of objects of groups that the group belong to.
                  type: array
                  items:
                    "$ref": "#/components/schemas/GroupNameAndIDInput"
                  deprecated: false
                users:
                  description: Array of names of user names that the group belong
                    to.
                  type: array
                  items:
                    "$ref": "#/components/schemas/UserNameAndIDInput"
                  deprecated: false
                type:
                  description: Type of user group. LOCAL_GROUP indicates that the
                    user is created locally in the ThoughtSpot system.
                  default: LOCAL_GROUP
                  type: string
                  enum:
                  - LOCAL_GROUP
                  - TENANT_GROUP
                  deprecated: false
              required:
              - name
              - displayName
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GroupResponse"
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/group/update":
    put:
      operationId: Update group
      description: |-
        You can use this endpoint to programmatically modify an existing user account.
        To modify a user, you require admin user privileges.
        At least one of User Id or username is mandatory. When both are given, then user id will be considered and username will be updated
      tags:
      - Group
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: Name of the user group. The group name string must
                    be unique.
                  type: string
                  deprecated: false
                id:
                  description: he GUID of the user account to query.
                  type: string
                  deprecated: false
                displayName:
                  description: A unique display name string for the user group, for
                    example, Developer group.
                  type: string
                  deprecated: false
                visibility:
                  description: Visibility of the user group. The visibility attribute
                    is set to DEFAULT. The DEFAULT attribute makes the user group
                    visible for other user groups and allows them to share objects.
                  default: DEFAULT
                  type: string
                  enum:
                  - DEFAULT
                  - NON_SHARABLE
                  - SHARABLE
                  deprecated: false
                description:
                  description: Description text for the group.
                  type: string
                  deprecated: false
                privileges:
                  description: A JSON array of privileges assigned to the group
                  type: array
                  items:
                    type: string
                    enum:
                    - RANALYSIS
                    - DATAMANAGEMENT
                    - APPLICATION_ADMINISTRATION
                    - USER_ADMINISTRATION
                    - SYSTEMMANAGEMENT
                    - SYSTEM_INFO_ADMINISTRATION
                    - AUTHORING
                    - BACKUP_ADMINISTRATION
                    - SHAREWITHALL
                    - DEVELOPER
                    - JOBSCHEDULING
                    - GROUP_ADMINISTRATION
                    - BYPASSRLS
                    - EXPERIMENTALFEATUREPRIVILEGE
                    - A3ANALYSIS
                    - USERDATAUPLOADING
                    - DATADOWNLOADING
                    - DISABLE_PINBOARD_CREATION
                    - ADMINISTRATION
                  deprecated: false
                groups:
                  description: Array of objects of groups that the user belong to.
                  type: array
                  items:
                    "$ref": "#/components/schemas/GroupNameAndIDInput"
                  deprecated: false
                users:
                  description: Array of object, A JSON array of name of users of users.
                  type: array
                  items:
                    "$ref": "#/components/schemas/UserNameAndIDInput"
                  deprecated: false
                assignedLiveboards:
                  description: Array of string. An array of liveboard ids to be assigned
                    to the group.
                  type: array
                  items:
                    type: string
                  deprecated: false
                type:
                  description: Type of user group. LOCAL_GROUP indicates that the
                    user is created locally in the ThoughtSpot system.
                  default: LOCAL_GROUP
                  type: string
                  enum:
                  - LOCAL_GROUP
                  - TENANT_GROUP
                  deprecated: false
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/group/delete":
    delete:
      operationId: Delete group
      description: To remove a group from the ThoughtSpot system, send a DELETE request
        to this endpoint. At Least one value needed.  When both are given user id
        will be considered to fetch user information.
      tags:
      - Group
      parameters:
      - in: query
        name: name
        required: false
        schema:
          type: string
        description: Name of the group.
        deprecated: false
      - in: query
        name: id
        required: false
        schema:
          type: string
        description: The GUID of the group
        deprecated: false
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/group/addprivilege":
    put:
      operationId: Add privileges to group
      description: |-
        To programmatically add privileges to an existing group, use API endpoint.
        When you assign privileges to a group,  all the users under to this group inherits the privileges assigned to that group.
        At least one of id or name of group is required. When both are given user id will be considered.
      tags:
      - Group
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: Name of the group
                  type: string
                  deprecated: false
                id:
                  description: The GUID of the group to query.
                  type: string
                  deprecated: false
                privileges:
                  description: A JSON array of name of users or GUIDs of users or
                    both. When both are given then id is considered
                  type: array
                  items:
                    type: string
                    enum:
                    - RANALYSIS
                    - DATAMANAGEMENT
                    - APPLICATION_ADMINISTRATION
                    - USER_ADMINISTRATION
                    - SYSTEMMANAGEMENT
                    - SYSTEM_INFO_ADMINISTRATION
                    - AUTHORING
                    - BACKUP_ADMINISTRATION
                    - SHAREWITHALL
                    - DEVELOPER
                    - JOBSCHEDULING
                    - GROUP_ADMINISTRATION
                    - BYPASSRLS
                    - EXPERIMENTALFEATUREPRIVILEGE
                    - A3ANALYSIS
                    - USERDATAUPLOADING
                    - DATADOWNLOADING
                    - DISABLE_PINBOARD_CREATION
                    - ADMINISTRATION
                  deprecated: false
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/group/removeprivilege":
    put:
      operationId: Remove privileges from group
      description: To programmatically remove privileges from a group, use API endpoint.
        The API removes only the privilege association. It does not delete the privilege
        or group from the Thoughtspot system. At least one of id or name of group
        is required. When both are given user id will be considered.
      tags:
      - Group
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: Name of the group
                  type: string
                  deprecated: false
                id:
                  description: The GUID of the group to query.
                  type: string
                  deprecated: false
                privileges:
                  description: A JSON array of name of users or GUIDs of users or
                    both. When both are given then id is considered
                  type: array
                  items:
                    type: string
                    enum:
                    - RANALYSIS
                    - DATAMANAGEMENT
                    - APPLICATION_ADMINISTRATION
                    - USER_ADMINISTRATION
                    - SYSTEMMANAGEMENT
                    - SYSTEM_INFO_ADMINISTRATION
                    - AUTHORING
                    - BACKUP_ADMINISTRATION
                    - SHAREWITHALL
                    - DEVELOPER
                    - JOBSCHEDULING
                    - GROUP_ADMINISTRATION
                    - BYPASSRLS
                    - EXPERIMENTALFEATUREPRIVILEGE
                    - A3ANALYSIS
                    - USERDATAUPLOADING
                    - DATADOWNLOADING
                    - DISABLE_PINBOARD_CREATION
                    - ADMINISTRATION
                  deprecated: false
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/group/adduser":
    put:
      operationId: Add users to group
      description: To programmatically add existing ThoughtSpot users to a group,
        use this API endpoint. When you assign users to a group, the users inherits
        the privileges assigned to that group. At least one of id or name of the group
        is required. When both are given user id will be considered.
      tags:
      - Group
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: Name of the group
                  type: string
                  deprecated: false
                id:
                  description: The GUID of the group to query.
                  type: string
                  deprecated: false
                users:
                  description: Array of user name that you want to update in user
                    group.
                  type: array
                  items:
                    "$ref": "#/components/schemas/UserNameAndIDInput"
                  deprecated: false
              required:
              - users
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/group/removeuser":
    put:
      operationId: Remove users from group
      description: To programmatically remove users from a group, use API endpoint.The
        API removes only the user association. It does not delete the users or group
        from the Thoughtspot system. At least one of id or name of group is required.
        When both are given user id will be considered.
      tags:
      - Group
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: Name of the group
                  type: string
                  deprecated: false
                id:
                  description: The GUID of the group to query.
                  type: string
                  deprecated: false
                users:
                  description: Array of user name that you want to delete from user
                    group.
                  type: array
                  items:
                    "$ref": "#/components/schemas/UserNameAndIDInput"
                  deprecated: false
              required:
              - users
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/group/addgroup":
    put:
      operationId: Add groups to group
      description: To programmatically add existing groups to a group, use API endpoint.
        When you assign groups to a group, the group inherits the privileges assigned
        to those groups. At least one of id or name of group is required. When both
        are given user id will be considered.
      tags:
      - Group
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: Name of the group
                  type: string
                  deprecated: false
                id:
                  description: The GUID of the group to query.
                  type: string
                  deprecated: false
                groups:
                  description: Array of objects of groups that the user belong to.
                  type: array
                  items:
                    "$ref": "#/components/schemas/GroupNameAndIDInput"
                  deprecated: false
              required:
              - groups
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/group/removegroup":
    put:
      operationId: Remove groups from group
      description: To programmatically remove groups from a group, use API endpoint.The
        API removes only the group association. It does not delete the group from
        the Thoughtspot system. At least one of id or name of group is required. When
        both are given user id will be considered.
      tags:
      - Group
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: Name of the group
                  type: string
                  deprecated: false
                id:
                  description: The GUID of the group to query.
                  type: string
                  deprecated: false
                groups:
                  description: Array of objects of groups that the user belong to.
                  type: array
                  items:
                    "$ref": "#/components/schemas/GroupNameAndIDInput"
                  deprecated: false
              required:
              - groups
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/group/search":
    post:
      operationId: Search groups
      description: To get the details of a specific group account or all groups in
        the ThoughtSpot system, use this end point.
      tags:
      - Group
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                outputFields:
                  description: Array of field names that need to be included in the
                    response
                  type: array
                  items:
                    type: string
                  deprecated: false
                name:
                  description: Name of the user group
                  type: string
                  deprecated: false
                id:
                  description: GUID of the group to update
                  type: string
                  deprecated: false
                displayName:
                  description: A unique display name string for the user group, for
                    example, Developer group.
                  type: string
                  deprecated: false
                visibility:
                  description: Visibility of the user group. The visibility attribute
                    is set to DEFAULT. The DEFAULT attribute makes the user group
                    visible for other user groups and allows them to share objects.
                  type: string
                  deprecated: false
                description:
                  description: Description text for the group.
                  type: string
                  deprecated: false
                privileges:
                  description: A JSON array of privileges assigned to the group
                  type: array
                  items:
                    type: string
                    enum:
                    - RANALYSIS
                    - DATAMANAGEMENT
                    - APPLICATION_ADMINISTRATION
                    - USER_ADMINISTRATION
                    - SYSTEMMANAGEMENT
                    - SYSTEM_INFO_ADMINISTRATION
                    - AUTHORING
                    - BACKUP_ADMINISTRATION
                    - SHAREWITHALL
                    - DEVELOPER
                    - JOBSCHEDULING
                    - GROUP_ADMINISTRATION
                    - BYPASSRLS
                    - EXPERIMENTALFEATUREPRIVILEGE
                    - A3ANALYSIS
                    - USERDATAUPLOADING
                    - DATADOWNLOADING
                    - DISABLE_PINBOARD_CREATION
                    - ADMINISTRATION
                  deprecated: false
                groups:
                  description: Array of objects of groups that the user belong to.
                  type: array
                  items:
                    "$ref": "#/components/schemas/GroupNameAndIDInput"
                  deprecated: false
                users:
                  description: Array of user name that associated with group.
                  type: array
                  items:
                    "$ref": "#/components/schemas/UserNameAndIDInput"
                  deprecated: false
                type:
                  description: Type of user group. LOCAL_GROUP indicates that the
                    user is created locally in the ThoughtSpot system.
                  type: string
                  deprecated: false
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/metadata/tag/create":
    post:
      operationId: Create tag
      description: To programmatically create tags, use this endpoint
      tags:
      - Metadata
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: Name of the tag
                  type: string
                  deprecated: false
                color:
                  description: Hex color code to be assigned to the tag
                  type: string
                  deprecated: false
              required:
              - name
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MetadataTagResponse"
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
      x-codeSamples:
        - lang: cURL
          label: 'CURL'
          source: |
            curl --request POST \
            --url 'https://{ThoughtSpot-Host}/tspublic/rest/v2/metadata/tag/create' \
            -H 'Authorization: Bearer {OAUTH_TOKEN}' \
            -H 'Accept-Language: *' \
            -H 'Content-Type: application/json' \
            --data-raw '{
            "name": "Accounting",
            "color": "#FCC838"
            }'
  "/tspublic/rest/v2/metadata/tag/update":
    put:
      operationId: Update tag
      description: To programmatically update tags, use this endpoint. At least one
        of id or name of tag is required. When both are given, then id will be considered.
      tags:
      - Metadata
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: Name of the tag
                  type: string
                  deprecated: false
                id:
                  description: The GUID of the tag
                  type: string
                  deprecated: false
                color:
                  description: Hex color code to be assigned to the tag
                  type: string
                  deprecated: false
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/metadata/tag/delete":
    delete:
      operationId: Delete tag
      description: To programmatically delete tags, use this endpoint. At least one
        of id or name of tag is required. When both are given, then id will be considered.
      tags:
      - Metadata
      parameters:
      - in: query
        name: name
        required: false
        schema:
          type: string
        description: Name of the tag
        deprecated: false
      - in: query
        name: id
        required: false
        schema:
          type: string
        description: The GUID of the tag
        deprecated: false
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/metadata/tag/assign":
    put:
      operationId: Assign tag
      description: To programmatically assign tags to a metadata object, such as a
        liveboard, search answer, table, worksheet, or view, use this endpoint.  At
        least one of id or name of tag is required. When both are given, then id will
        be considered.
      tags:
      - Metadata
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: Name of the tag
                  type: string
                  deprecated: false
                id:
                  description: The GUID of the tag
                  type: string
                  deprecated: false
                tsObject:
                  description: A JSON Array of GUIDs and type of metadata object.
                  type: array
                  items:
                    "$ref": "#/components/schemas/TsObjectInput"
                  deprecated: false
              required:
              - tsObject
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/metadata/tag/unassign":
    put:
      operationId: Unassign tag
      description: To programmatically unassign tags to a metadata object, such as
        a liveboard, search answer, table, worksheet, or view, use this endpoint.
        At least one of id or name of tag is required. When both are given, then id
        will be considered.
      tags:
      - Metadata
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: Name of the tag
                  type: string
                  deprecated: false
                id:
                  description: The GUID of the tag
                  type: string
                  deprecated: false
                tsObject:
                  description: A JSON Array of GUIDs and type of metadata object.
                  type: array
                  items:
                    "$ref": "#/components/schemas/TsObjectInput"
                  deprecated: false
              required:
              - tsObject
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/metadata/favorite/assign":
    put:
      operationId: Assign favorite
      description: To programmatically assign objects to favorites for a given user
        account, use this endpoint. At least one of user id or username is required.
        When both are given, then id will be considered.
      tags:
      - Metadata
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  description: Name of the user
                  type: string
                  deprecated: false
                userId:
                  description: The GUID of the user
                  type: string
                  deprecated: false
                tsObject:
                  description: A JSON Array of GUIDs and type of metadata object.
                  type: array
                  items:
                    "$ref": "#/components/schemas/TsObjectInput"
                  deprecated: false
              required:
              - tsObject
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/metadata/favorite/unassign":
    put:
      operationId: Unassign favorite
      description: To programmatically unassign objects to favorites for a given user
        account, use this endpoint. At least one of user id or username is required.
        When both are given, then id will be considered.
      tags:
      - Metadata
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  description: Name of the user
                  type: string
                  deprecated: false
                userId:
                  description: The GUID of the user
                  type: string
                  deprecated: false
                tsObject:
                  description: A JSON Array of GUIDs and type of metadata object.
                  type: array
                  items:
                    "$ref": "#/components/schemas/TsObjectInput"
                  deprecated: false
              required:
              - tsObject
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/metadata/homeliveboard/assign":
    put:
      operationId: Assign home Liveboard
      description: To assign a specific liveboard as a home liveboard for a user,
        use this endpoint. At least one of user id or username is required. When both
        are given, then id will be considered.
      tags:
      - Metadata
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  description: Name of the user
                  type: string
                  deprecated: false
                userId:
                  description: The GUID of the user
                  type: string
                  deprecated: false
                liveboardId:
                  description: The GUID of the liveboard
                  type: string
                  deprecated: false
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/metadata/homeliveboard/unassign":
    put:
      operationId: Unassign home Liveboard
      description: To unassign the home liveboard set for a user, use this endpoint.
        At least one of user id or username is required. When both are given, then
        id will be considered.
      tags:
      - Metadata
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  description: Name of the user
                  type: string
                  deprecated: false
                userId:
                  description: The GUID of the user
                  type: string
                  deprecated: false
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/metadata/tml/export":
    post:
      operationId: Export object TML
      description: To export ThoughtSpot objects represented in ThoughtSpot Modeling
        Language (TML), use this endpoint
      tags:
      - Metadata
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  description: A JSON array of GUIDs of the objects.
                  type: array
                  items:
                    type: string
                  deprecated: false
                formatType:
                  description: The format in which to export the objects
                  default: YAML
                  type: string
                  enum:
                  - YAML
                  - JSON
                  deprecated: false
                exportAssociated:
                  description: Specifies if you would like to export the associated
                    objects. To export the objects associated with the objects specified
                    in id, set the value to true. When set to true, the API exports
                    any underlying worksheets, tables, or views for a given object.
                    By default, the API does not export these underlying objects
                  default: false
                  type: boolean
                  deprecated: false
              required:
              - id
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/metadata/tml/import":
    post:
      operationId: Import object TML
      description: To import ThoughtSpot objects represented in ThoughtSpot Modeling
        Language (TML), use this endpoint
      tags:
      - Metadata
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                objectTML:
                  description: "A string array of TML objects to upload, in YAML or
                    JSON format. \n\nIf TML is in YAML format, then use escape characters
                    for quotes and new line characters. \n\nExample TML: \n\nguid:
                    6d2c1c9b-a407-409c-8c0c-819aeb51350f\\ntable:\\n  name: TESTINT\\n
                    \ db: SUPPLYCHAIN_MAIN\\n  schema: PUBLIC\\n  db_table: TESTINT\\n
                    \ connection:\\n    name: SnowflakeConnection\\n  columns:\\n
                    \ - name: C1\\n    db_column_name: C1\\n    properties:\\n      column_type:
                    MEASURE\\n      aggregation: SUM\\n      index_type: DONT_INDEX\\n
                    \   db_column_properties:\\n      data_type: INT64\\n \n\nIf TML
                    is in JSON format, then use escape characters for quotes. \n\nExample
                    TML: \n\n{\\\\\"guid\\\\\": \\\\\"6d2c1c9b-a407-409c-8c0c-819aeb51350f\\\\\",
                    \\\\\"table\\\\\": {     \\\\\"name\\\\\": \\\\\"TESTINT\\\\\",
                    \\\\\"db\\\\\": \\\\\"SUPPLYCHAIN_MAIN\\\\\", \\\\\"schema\\\\\":
                    \\\\\"PUBLIC\\\\\", \\\\\"db_table\\\\\": \\\\\"TESTINT\\\\\",
                    \    \\\\\"connection\\\\\": { \\\\\"name\\\\\": \\\\\"SnowflakeConnection\\\\\"
                    }, \\\\\"columns\\\\\": [ { \\\\\"name\\\\\": \\\\\"C1\\\\\",
                    \\\\\"db_column_name\\\\\": \\\\\"C1\\\\\", \\\\\"properties\\\\\":
                    { \\\\\"column_type\\\\\": \\\\\"MEASURE\\\\\", \\\\\"aggregation\\\\\":
                    \\\\\"SUM\\\\\", \\\\\"index_type\\\\\": \\\\\"DONT_INDEX\\\\\"
                    }, \\\\\"db_column_properties\\\\\": { \\\\\"data_type\\\\\":
                    \\\\\"INT64\\\\\" } } ] } }',"
                  type: array
                  items:
                    type: string
                  deprecated: false
                importPolicy:
                  description: Policy to follow during import
                  default: PARTIAL
                  type: string
                  enum:
                  - PARTIAL
                  - ALL_OR_NONE
                  - VALIDATE_ONLY
                  deprecated: false
                forceCreate:
                  description: Specifies if you are updating or creating objects.
                    To create new objects, specify true. By default, ThoughtSpot updates
                    existing objects that have the same GUID as the objects you are
                    importing. When set to true, the GUID property in the imported
                    TML is replaced on the server, and the response headers will include
                    the id_guid property with the GUID of the new object. The new
                    object will be assigned a new GUID, even if the imported TML file
                    included a guid value. Thus, there is no need to include the guid
                    in the TML file if you are using forceCreate=true.
                  default: false
                  type: boolean
                  deprecated: false
              required:
              - objectTML
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/metadata/delete":
    delete:
      operationId: Delete object
      description: Use this endpoint to delete the metadata objects
      tags:
      - Metadata
      parameters:
      - in: query
        name: type
        required: true
        schema:
          type: string
          enum:
          - ANSWER
          - LIVEBOARD
          - DATAOBJECT
          - COLUMN
          - JOIN
          - CONNECTION
          - TAG
          - USER
          - USER_GROUP
        description: Type of the metadata object being searched
        deprecated: false
      - in: query
        name: id
        required: true
        schema:
          type: array
          items:
            type: string
        description: A JSON array of GUIDs of the objects
        deprecated: false
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/database/table/create":
    post:
      operationId: Create table
      description: To create a table in Falcon, use this endpoint.
      tags:
      - Database
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                createDatabase:
                  description: 'Flag to indicate if the database and schema should
                    be created if they do not exist in Falcon. (Valid values: True/False)'
                  default: true
                  type: boolean
                  deprecated: false
                schema:
                  description: 'DDL of the table to be created. Example: {"database":{"name":"test_db"},"schema":{"name":"test_schema"},"table":{"id":{"name":"test_table"},"primary_key":[{"name":"test_pk"}],"column":[{"id":{"name":"test_pk"},"size":0,"data_type":"TYPE_INT32"},{"id":{"name":"test_col1"},"size":0,"data_type":"TYPE_FLOAT"},{"id":{"name":"test_col2"},"data_type":"TYPE_INT64","datetime":"TYPE_DATE"}{"id":{"name":"test_col3"},"size":10,"data_type":"TYPE_VAR_CHAR"}]}}'
                  type: string
                  deprecated: false
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CreateTableResponse"
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/database/table/runquery":
    post:
      operationId: Run query
      description: To run a TQL statement in Falcon, use this endpoint. You can run
        only following type of statements - Table DDL alter and Table rows update
        and delete.
      tags:
      - Database
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                statement:
                  description: 'A JSON array of TQL statements separated by semi-colon
                    (;). Each TQL statement should end with semi-colon (;). The TQL
                    operations that can be run through this API are restricted to
                    create database and schema, alter table, delete and update table
                    rows. If a TQL statement fails, then the subsequent statements
                    in the array are not run. Example: ["alter table test_db.test_schema.test_table
                    drop contraint primary key;";"alter table test_db.test_schema.test_table
                    add column test_col4 varchar(10) DEFAULT '''';"]'
                  type: array
                  items:
                    type: string
                  deprecated: false
              required:
              - statement
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/metadata/dependency":
    post:
      operationId: Get object dependency
      description: 'To query the details of dependent objects and associate objects
        as dependents, you can use this API. Dependency is defined as relation between
        referenced and referencing objects. A referencing object is said to have a
        dependency on a referenced object, if the referenced object cannot be deleted
        without first deleting the referencing object. For example, consider a worksheet
        ''W1'' that has a derived logical column ''C1'' that has a reference to a
        base logical column ''C2''. This can be shown diagramatically as: W1-->C1-->C2.
        W1 has a dependency on C2 i.e. W1 is a referencing object and C2 is a referenced
        object. It is not possible to delete C2 without first deleting W1 because
        deletion of C2 will be prevented by the relationship between W1''s column
        C1 and C2. Similarly C1 is said to have a dependency on C2 i.e. C1 is a referencing
        object and C2 is a referenced object. It is not possible to delete C2 without
        first deleting C1'
      tags:
      - Metadata
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  description: Type of the data object
                  type: string
                  enum:
                  - LIVEBOARD
                  - DATAOBJECT
                  - COLUMN
                  - JOIN
                  deprecated: false
                id:
                  description: A JSON array of GUIDs of the objects
                  type: array
                  items:
                    type: string
                  deprecated: false
                batchSize:
                  description: The maximum number of batches to fetch in a query.
                    If this attribute is not defined, the value specified in the cluster
                    configuration is used. To get the list of all dependent objects
                    in a single query, define the batch size attribute as -1
                  default: -1
                  type: integer
                  format: int32
                  deprecated: false
              required:
              - type
              - id
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/connection/create":
    post:
      operationId: Create connection
      description: |-
        To programmatically create a connection in the ThoughtSpot system use this API endpoint.
        Using this API, you can create a connection and assign groups.
        To create a connection, you require admin connection privileges.
        All connections created in the ThoughtSpot system are added to ALL_GROUP
      tags:
      - Connection
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  description: Type of the data connection.
                  type: string
                  enum:
                  - SNOWFLAKE
                  - AMAZON_REDSHIFT
                  - GOOGLE_BIGQUERY
                  - AZURE_SYNAPSE
                  - TERADATA
                  - STARBURST
                  - SAP_HANA
                  - ORACLE_ADW
                  - DATABRICKS
                  - DENODO
                  - DREMIO
                  deprecated: false
                name:
                  description: Name of the connection
                  type: string
                  deprecated: false
                description:
                  description: A short description of the connection.
                  type: string
                  deprecated: false
                configuration:
                  description: A JSON object of the connection metadata. The metadata
                    must include configuration attributes required to create the connection.
                  type: string
                  deprecated: false
              required:
              - type
              - name
              - configuration
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CreateConnectionResponse"
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/connection/update":
    put:
      operationId: Update connection
      description: |-
        You can use this endpoint to programmatically modify an existing connection
        To modify a connection, you require admin connection privileges.
        At least one of Connection Id or connectionname is mandatory. When both are given, then connection id will be considered and connectionname will be updated
      tags:
      - Connection
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  description: GUID of the connection
                  type: string
                  deprecated: false
                name:
                  description: The text to update the name of the connection.
                  type: string
                  deprecated: false
                description:
                  description: The text to update the description of the connection.
                  type: string
                  deprecated: false
                configuration:
                  description: A JSON object of the connection metadata. Include all
                    the configuration attributes with original value along with the
                    changes required to any attribute.
                  type: string
                  deprecated: false
              required:
              - id
              - configuration
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/connection/delete":
    delete:
      operationId: Delete connection
      description: To remove a connection from the ThoughtSpot system, use this endpoint.
      tags:
      - Connection
      parameters:
      - in: query
        name: id
        required: true
        schema:
          type: array
          items:
            type: string
        description: A JSON array of GUIDs of the connection
        deprecated: false
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/connection/addtable":
    put:
      operationId: Add table to connection
      description: |-
        To programmatically add table to an existing connection use this endpoint.
        When you assign groups to a connection, the connection inherits the privileges assigned to those groups.
        At least one of Connection Id or connectionname is mandatory. When both are given, then connection id will be considered.
      tags:
      - Connection
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  description: GUID of the connection
                  type: string
                  deprecated: false
                table:
                  description: A JSON array of table details
                  type: array
                  items:
                    "$ref": "#/components/schemas/AddTableInput"
                  deprecated: false
              required:
              - id
              - table
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/connection/removetable":
    put:
      operationId: Remove table from connection
      description: |-
        To programmatically remove a table from a connection use API endpoint.
        The API removes only the connection association. It does not delete the connection or group from the Thoughtspot system.
         At least one of id or name of connection is required. When both are given connection id will be considered.
      tags:
      - Connection
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  description: GUID of the connection
                  type: string
                  deprecated: false
                table:
                  description: A JSON array of name or GUIDs of the table or both.
                    At least one input is required. Provide either table name or id.
                    When both are given then id is considered
                  type: array
                  items:
                    "$ref": "#/components/schemas/TableInput"
                  deprecated: false
              required:
              - id
              - table
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/connection/search":
    post:
      operationId: Search connection
      description: To get the details of a specific connection or all connections
        in the ThoughtSpot system use this end point.
      tags:
      - Connection
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                offset:
                  description: The offset point, starting from where the records should
                    be included in the response. If no input is provided then offset
                    starts from 0
                  default: 0
                  type: integer
                  format: int32
                  deprecated: false
                batchNumber:
                  description: 'An alternate way to set offset for the starting point
                    of the response. Offset field should be kept blank to use the
                    value from this field. Offset value will be calculated as (batchNumber
                    - 1) * batchSize. It is mandatory to provide a value for batchSize
                    with batchNumber. Example: Assume response has 100 records. Now,  batchNumber
                    is set as 2 and batchSize as 10, then offset value will be 10.
                    So, 10 records starting from 11th record will be considered.'
                  default: -1
                  type: integer
                  format: int32
                  deprecated: false
                batchSize:
                  description: The number of records that should be included in the
                    response starting from offset position. If no input is provided,
                    then all records starting from the value provided in offset is
                    included in the response.
                  default: -1
                  type: integer
                  format: int32
                  deprecated: false
                sortBy:
                  description: Field based on which the re.sponse needs to be ordered.
                    Valid values
                  default: DEFAULT
                  type: string
                  enum:
                  - DEFAULT
                  - NAME
                  - DISPLAY_NAME
                  - AUTHOR
                  - CREATED
                  - MODIFIED
                  - LAST_ACCESSED
                  - SYNCED
                  - VIEWS
                  - NONE
                  - USER_STATE
                  - ROW_COUNT
                  deprecated: false
                sortOrder:
                  description: Order in which sortBy should be applied. Valid values
                  type: string
                  enum:
                  - DEFAULT
                  - ASC
                  - DESC
                  deprecated: false
                type:
                  description: 'Type of the connect being searched. Valid values:
                    SNOWFLAKE|AMAZON_REDSHIFT|GOOGLE_BIGQUERY|AZURE_SYNAPSE|TERADATA|STARBURST|SAP_HANA|ORACLE_ADW|DATABRICKS|DENODO'
                  type: string
                  enum:
                  - SNOWFLAKE
                  - AMAZON_REDSHIFT
                  - GOOGLE_BIGQUERY
                  - AZURE_SYNAPSE
                  - TERADATA
                  - STARBURST
                  - SAP_HANA
                  - ORACLE_ADW
                  - DATABRICKS
                  - DENODO
                  - DREMIO
                  deprecated: false
                namePattern:
                  description: A pattern to match the name of the connection. This
                    parameter supports matching case-insensitive strings. For a wildcard
                    match, use %.
                  type: string
                  deprecated: false
                fetchId:
                  description: A JSON array containing the GUIDs of the connections
                    that you want to fetch.
                  type: array
                  items:
                    type: string
                  deprecated: false
                skipId:
                  description: A JSON array containing the GUIDs of the connections
                    that you want to skip.
                  type: array
                  items:
                    type: string
                  deprecated: false
                tag:
                  description: A JSON array of name or GUID of tags or both. When
                    both are given then id is considered
                  type: array
                  items:
                    "$ref": "#/components/schemas/TagNameAndIdInput"
                  deprecated: false
              required:
              - type
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ConnectionResponse"
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/connection/table":
    post:
      operationId: Get connection tables
      description: "To get the details of tables from a connection, use this endpoint.
        \n\nYou can get the details of tables in the data platform for the connection
        id provided."
      tags:
      - Connection
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  description: The GUID of the connection
                  type: string
                  deprecated: false
                configuration:
                  description: "   A JSON object of the connection metadata. If this
                    field is left empty, then the configuration saved in the connection
                    is considered. \n\nTo get the tables based on a different configuration,
                    include required attributes in the connection configuration JSON.
                    \n\nExample: \n\n\n   Get tables from Snowflake with a different
                    user account than specified in the connection: {\"user\":\"test_user\",\"password\":\"test_pwd\",\"role\":\"test_role\"}
                    \n\n\n   Get tables from Redshift for different database than
                    specified in the connection: {\"database\":\"test_db\"} "
                  type: string
                  deprecated: false
                includeColumn:
                  description: When set to true, the response will include column
                    level details as well
                  default: true
                  type: boolean
                  deprecated: false
              required:
              - id
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ConnectionTableResponse"
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/connection/tablecoloumn":
    post:
      operationId: Get connection table columns
      description: "To get the details of columns in a table associated to a connection,
        use this endpoint. \n\nYou can get the columns of any table available in the
        data platform for the connection id provided."
      tags:
      - Connection
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  description: The GUID of the connection
                  type: string
                  deprecated: false
                configuration:
                  description: "   A JSON object of the connection metadata. If this
                    field is left empty, then the configuration saved in the connection
                    is considered. \n\nTo get the tables based on a different configuration,
                    include required attributes in the connection configuration JSON.
                    \n\nExample: \n\n\n   Get tables from Snowflake with a different
                    user account than specified in the connection: {\"user\":\"test_user\",\"password\":\"test_pwd\",\"role\":\"test_role\"}
                    \n\n\n   Get tables from Redshift for different database than
                    specified in the connection: {\"database\":\"test_db\"} "
                  type: string
                  deprecated: false
                table:
                  description: List of table details
                  type: array
                  items:
                    "$ref": "#/components/schemas/ConnectionTableColumnsInput"
                  deprecated: false
              required:
              - id
              - table
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ConnectionTableColumnsResponse"
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/admin/configuration/update":
    put:
      operationId: Update cluster config
      description: To update the Thoughtspot cluster configuration, use this endpoint.
      tags:
      - Admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                configuration:
                  description: |-
                    A JSON file with the key-value pair of configuration attributes to be updated.

                    Example: {"defaultChartDataSize": 5000}
                  type: string
                  deprecated: false
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/admin/resetpassword":
    put:
      operationId: Reset user password
      description: "To reset the password of a ThoughtSpot user account, use this
        endpoint. \n\nIt is mandatory to use Authorization header with token of a
        user with admin access to successfully run this endpoint. \n\nAt least one
        of User Id or username is mandatory. When both are given, then user id will
        be considered."
      tags:
      - Admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: User name of the user account
                  type: string
                  deprecated: false
                id:
                  description: The GUID of the user account to query.
                  type: string
                  deprecated: false
                newPassword:
                  description: A new password for the user.
                  type: string
                  deprecated: false
              required:
              - newPassword
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/admin/syncprincipal":
    put:
      operationId: Synchronize principal
      description: "To programmatically synchronize user accounts and user groups
        from external system with ThoughtSpot, use this endpoint. \n\n The payload
        takes principals containing all users and groups present in the external system.
        \n\n The users and user groups in Thoughtspot get updated for any matching
        inputs. \n\n Any user and user group present in the input, but not present
        in the cluster, gets created in cluster. \nn You can optionally choose to
        delete the user and groups from the cluster, that are not present in the input."
      tags:
      - Admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                principalObject:
                  description: "A JSON array of principal objects containing all users
                    and groups present in the external system. \n\nExample: \n\n{
                    \n\n\"name\": \"Customer Success\", \n\n\"displayName\": \"Customer
                    Success\", \n\n\"description\": \"CS\", \n\n\"created\": 1568926267025,
                    \n\n\"modified\": 1568926982242, \n\n\"principalTypeEnum\": \"LOCAL_GROUP\",
                    \n\n\"groupNames\": [], \n\n\"visibility\": \"DEFAULT\" \n\n},
                    \n\n{ \n\n\"name\": \"test\", \n\n\"displayName\": \"test one\",
                    \n\n\"created\": 1587573621279, \n\n\"modified\": 1587573621674,
                    \n\n\"mail\": \"test2@test.com\", \n\n\"principalTypeEnum\": \"LOCAL_USER\",
                    \n\n\"groupNames\": [ \"Administrator\", \"All\" ], \n\n\"visibility\":
                    \"DEFAULT\" \n\n} \n\nYou can leave the created and modified dates
                    blank for new users. \n\nYou can specify if the principal is a
                    user (LOCAL_USER) or user group (LOCAL_GROUP) in the principalTypeEnum
                    keyword. \n\nSet visibility to NON_SHARABLE, if you do not want
                    the user to be able to share ThoughtSpot objects with other users
                    in this group."
                  type: array
                  items:
                    type: object
                  deprecated: false
                updateModified:
                  description: Specifies whether to apply the changes to users and
                    groups already in the cluster based on the principal object list
                    input.
                  default: false
                  type: boolean
                  deprecated: false
                deleteRemoved:
                  description: Specifies whether to delete the users and groups already
                    in the cluster if not present in the principal object list input.
                  default: false
                  type: boolean
                  deprecated: false
                newUserPassword:
                  description: "Assign a password for new users added during the sync
                    operation. \n\nAll new users added will have this password. It
                    is mandatory to provide value for this field if new users are
                    included in the input list."
                  type: string
                  deprecated: false
              required:
              - principalObject
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AdminsyncPrincipalResponse"
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/admin/changeauthor":
    put:
      operationId: Change author of objects
      description: "To programmatically change the owner of one or several objects
        from one user account to another, use this endpoint. \n\nYou might want to
        transfer ownership of objects owned by a user to another active user, when
        the account is removed from the ThoughtSpot application."
      tags:
      - Admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tsObjectId:
                  description: "A JSON array of GUIDs of the metadata objects. \n\nTo
                    change owner of all the objects owned by a user, provide single
                    input as ALL. \n\nIf multiple object ids along with ALL is provided
                    as input, then ALL will be considered."
                  type: array
                  items:
                    type: string
                  deprecated: false
                fromUser:
                  description: "A JSON object of name or GUIDs of the current owner
                    of the objects. When both are given then id is considered. \n\nIf
                    a list of object ids are provided as input for tsObjectId, then
                    only for those ids that have owner as the value provided in fromUser,
                    the owner will be changed. \n\nProvide either name or id as input.
                    When both are given user id will be considered."
                  "$ref": "#/components/schemas/FromUserNameAndIDInput"
                  deprecated: false
                toUser:
                  description: A JSON object of name or GUIDs of the new owner for
                    the objects. When both are given then id is considered.
                  "$ref": "#/components/schemas/ToUserNameAndIDInput"
                  deprecated: false
              required:
              - tsObjectId
              - fromUser
              - toUser
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/admin/assignauthor":
    put:
      operationId: Assign author to objects
      description: "To programmatically assign an author to one or several objects,
        use this endpoint. \n\nProvide either user name or id as input. When both
        are given user id will be considered. \n\nRequires administration privilege."
      tags:
      - Admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tsObjectId:
                  description: A JSON array of GUIDs of the metadata objects.
                  type: array
                  items:
                    type: string
                  deprecated: false
                name:
                  description: User name of the user account
                  type: string
                  deprecated: false
                id:
                  description: The GUID of the user account
                  type: string
                  deprecated: false
              required:
              - tsObjectId
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/admin/forcelogout":
    post:
      operationId: Force logout users
      description: "To logout one or more users from logged in session, use this endpoint.
        If no input is provided then all logged in users are force logged out. \n\nRequires
        administration privilege"
      tags:
      - Admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  description: A JSON array of name of users or GUIDs of groups or
                    both. When both are given then id is considered.
                  type: array
                  items:
                    "$ref": "#/components/schemas/NameAndIdInput"
                  deprecated: false
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/report/answer":
    post:
      operationId: Answer report
      description: "To programmatically download Answer data as a file, use this endpoint.
        \n\nThe PDF will download data in the tabular format even if Answer is saved
        as chart."
      tags:
      - Report
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  description: GUID of the Answer to download.
                  type: string
                  deprecated: false
                type:
                  description: Type of file to be generated.
                  type: string
                  enum:
                  - CSV
                  - XLSX
                  - PDF
                  - PNG
                  deprecated: false
              required:
              - id
              - type
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/report/liveboard":
    post:
      operationId: Liveboard report
      description: To programmatically download Liveboard data or specific Visualization
        data from Liveboard as a file, use this endpoint
      tags:
      - Report
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  description: "GUID of the Liveboard to download. \n\nThis field
                    is considered only when no input is provided for transientContent
                    field."
                  type: string
                  deprecated: false
                vizId:
                  description: "JSON Array of GUIDs of the visualizations in the Liveboard
                    to be included in the downloaded file. \n\nFor CSV, XLSX and PNG
                    file download, visualization id is mandatory. CSV and XLSX is
                    valid only for visualization of type table and PNG is valid for
                    charts. \n\nOnly one value will be accepted for these formats.
                    If multiple values are provided then first value in the array
                    will be considered."
                  type: array
                  items:
                    type: string
                  deprecated: false
                transientContent:
                  description: If you have embedded ThoughtSpot in your host application,
                    and you want to download Liveboards with unsaved changes as a
                    file, pass the transient content from the browser fetch request,
                    using the getExportRequestForCurrentPinboard method. For more
                    information, see https://developers.thoughtspot.com/docs/?pageid=liveboard-export-api#transient-pinboard.
                  type: string
                  deprecated: false
                runtimeFilter:
                  description: If you have embedded ThoughtSpot in your host application,
                    and you want to download Liveboards with unsaved changes as a
                    file, pass the transient content from the browser fetch request,
                    using the getExportRequestForCurrentPinboard method. For more
                    information, see https://developers.thoughtspot.com/docs/?pageid=liveboard-export-api#transient-pinboard
                    .
                  type: string
                  deprecated: false
                runtimeSort:
                  description: "JSON object which provides columns to sort the data
                    at the time of data retrieval. \n\nExample: {\"sortCol1\":\"region\",\"asc1\":true,\"sortCol2\":\"date\"}
                    \n\nFor more information, see https://developers.thoughtspot.com/docs/?pageid=runtime-filters"
                  type: string
                  deprecated: false
                type:
                  description: 'Type of file to be generated. Valid values: CSV/XLSX/PDF/PNG.'
                  type: string
                  enum:
                  - CSV
                  - XLSX
                  - PDF
                  - PNG
                  deprecated: false
                pdfOptions:
                  description: Additional options that are applicable for PDF type.
                  "$ref": "#/components/schemas/pdfOptionsInput"
                  deprecated: false
              required:
              - type
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/materialization/refreshview":
    put:
      operationId: Refresh materialized view
      description: Use this endpoint to refresh data in the materialized view by running
        the query associated with it
      tags:
      - Materialization
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  description: GUID of metadata object
                  type: string
                  deprecated: false
              required:
              - id
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/customaction/create":
    post:
      operationId: Create custom action
      description: To programmatically create custom actions on ThoughtSpot clusters
        that support embedding configuration, use this endpoint
      tags:
      - CustomActions
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                configuration:
                  description: "A JSON object with the key-value pair of configuration
                    attributes \n\nExample: \n\n{\"id\":\"3f7eac93-cce1-4ffc-b7a8-429353edbc6b\",\"name\":\"unpkg
                    test\",\"version\":\"v2\",\"type\":\"URL\",\"detail\":{\"link\":\"https://unpkg.com
                    \",\"function\":\"unpkg-test\",\"authSelect\":\"BEARER\",\"authToken\":\"asdfasadf3q4534534\",\"encodeUser\":\"\",\"apiKey\":\"X-API-KEY\",\"apiValue\":\"\",\"additionalUrlHeaders\":\"{\\\\\"url_header1\\\\\":{\\\\\"id\\\\\":\\\\\"6a82908c-9328-40ff-b347-65adeda12f57\\\\\",\\\\\"key\\\\\":\\\\\"key1\\\\\",\\\\\"value\\\\\":\\\\\"value1\\\\\"}}\"},\"actionAssociationMap\":{\"ANSWER\":{\"e4079d3f-ae71-4b0a-a70a-f17ecaf157a5\":{\"enabled\":\"true\",\"context\":\"MENU\"}}},\"context\":\"NONE\",\"availability\":[\"GLOBAL\"],\"userGroupList\":[\"d0326b56-ef23-4c8a-8327-a30e99bcc72b\"]}"
                  type: string
                  deprecated: false
              required:
              - configuration
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/customaction/update":
    put:
      operationId: Update custom action
      description: To programmatically edit an existing custom action, use this endpoint
      tags:
      - CustomActions
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  description: GUID of the custom action
                  type: string
                  deprecated: false
                configuration:
                  description: "A JSON object with the key-value pair of configuration
                    attributes \n\nExample: \n\n{\"id\":\"3f7eac93-cce1-4ffc-b7a8-429353edbc6b\",\"name\":\"unpkg
                    test\",\"version\":\"v2\",\"type\":\"URL\",\"detail\":{\"link\":\"https://unpkg.com
                    \",\"function\":\"unpkg-test\",\"authSelect\":\"BEARER\",\"authToken\":\"asdfasadf3q4534534\",\"encodeUser\":\"\",\"apiKey\":\"X-API-KEY\",\"apiValue\":\"\",\"additionalUrlHeaders\":\"{\\\\\"url_header1\\\\\":{\\\\\"id\\\\\":\\\\\"6a82908c-9328-40ff-b347-65adeda12f57\\\\\",\\\\\"key\\\\\":\\\\\"key1\\\\\",\\\\\"value\\\\\":\\\\\"value1\\\\\"}}\"},\"actionAssociationMap\":{\"ANSWER\":{\"e4079d3f-ae71-4b0a-a70a-f17ecaf157a5\":{\"enabled\":\"true\",\"context\":\"MENU\"}}},\"context\":\"NONE\",\"availability\":[\"GLOBAL\"],\"userGroupList\":[\"d0326b56-ef23-4c8a-8327-a30e99bcc72b\"]}"
                  type: string
                  deprecated: false
              required:
              - id
              - configuration
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/customaction/delete":
    delete:
      operationId: Delete custom action
      description: To programmatically delete a custom action, use this endpoint
      tags:
      - CustomActions
      parameters:
      - in: query
        name: id
        required: true
        schema:
          type: string
        description: GUID of the custom action
        deprecated: false
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/customaction/association/update":
    put:
      operationId: Update custom action association
      description: To programmatically associate a custom action to a ThoughtSpot
        object, use this endpoint
      tags:
      - CustomActions
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  description: GUID of the custom action
                  type: string
                  deprecated: false
                association:
                  description: "A JSON map of the attributes with association of the
                    action to ThoughtSpot object ID \n\nExample: \n\n{\"id\":\"0dbd5b3a-84c1-4407-9803-cf07d67e6fcf\",\"name\":\"My
                    worksheet action\",\"version\":\"v2\",\"type\":\"URL\",\"detail\":{\"link\":\"https://unpkg.com\",\"function\":\"my-worksheet-action\",\"authSelect\":\"NONE\",\"authToken\":\"\",\"encodeUser\":\"\",\"apiKey\":\"X-API-KEY\",\"apiValue\":\"\",\"additionalUrlHeaders\":\"{}\"},\"actionAssociationMap\":{\"WORKSHEET\":{\"2b9d083a-275c-4984-9cfe-90b036affa17\":{\"enabled\":\"true\",\"context\":\"PRIMARY\"}}},\"context\":\"NONE\",\"availability\":[
                    ],\"userGroupList\":[\"d0326b56-ef23-4c8a-8327-a30e99bcc72b\"]}"
                  type: string
                  deprecated: false
              required:
              - id
              - association
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/customactions/association/delete":
    delete:
      operationId: Delete custom action association
      description: To remove custom action associations to ThoughtSpot objects, use
        this endpoint
      tags:
      - CustomActions
      parameters:
      - in: query
        name: id
        required: true
        schema:
          type: string
        description: GUID of the custom action
        deprecated: false
      - in: query
        name: association
        required: true
        schema:
          type: string
        description: "A JSON map of the attributes with association of the action
          to ThoughtSpot object ID \n\nExample: \n\n{\"id\":\"0dbd5b3a-84c1-4407-9803-cf07d67e6fcf\",\"name\":\"My
          worksheet action\",\"version\":\"v2\",\"type\":\"URL\",\"detail\":{\"link\":\"https://unpkg.com\",\"function\":\"my-worksheet-action\",\"authSelect\":\"NONE\",\"authToken\":\"\",\"encodeUser\":\"\",\"apiKey\":\"X-API-KEY\",\"apiValue\":\"\",\"additionalUrlHeaders\":\"{}\"},\"actionAssociationMap\":{\"WORKSHEET\":{\"2b9d083a-275c-4984-9cfe-90b036affa17\":{\"enabled\":\"true\",\"context\":\"PRIMARY\"}}},\"context\":\"NONE\",\"availability\":[
          ],\"userGroupList\":[\"d0326b56-ef23-4c8a-8327-a30e99bcc72b\"]}"
        deprecated: false
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/security/share/tsobject":
    post:
      operationId: Share object
      description: "To programmatically share ThoughtSpot objects with another user
        or user group, use this endpoint. \n\nWhen you share an object like a Liveboard
        or visualization, a notification with a live link is sent to the user. When
        the users access this object, they can view the last saved version of the
        object."
      tags:
      - Security
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  description: 'Type of metadata object. Valid values: Liveboard|Answer|DataObject|Column'
                  type: string
                  enum:
                  - LIVEBOARD
                  - ANSWER
                  - DATAOBJECT
                  - COLUMN
                  deprecated: false
                id:
                  description: A JSON array of the GUIDs of the objects to be shared
                  type: array
                  items:
                    type: string
                  deprecated: false
                permission:
                  description: "A JSON object with GUIDs of user and user group, and
                    the type of access privilge. \n\nYou can provide READ_ONLY or
                    MODIFY access to the objects. With READ_ONLY access, the user
                    or user group can view the shared object, whereas MODIFY access
                    enables users to modify the object. \n\nTo remove access to a
                    shared object, you can set the shareMode in the permission string
                    to NO_ACCESS. Example: \n\n{\"permissions\": {\"e7040a64-7ff1-4ab9-a1b0-f1acac596866\":
                    {\"shareMode\": \"READ_ONLY\"}, \"f7b8f511-317c-485d-8131-26cf084ef47b\":
                    {\"shareMode\": \"MODIFY\"}, \"7a9a6715-e154-431b-baaf-7b58246c13dd\":{\"shareMode\":\"NO_ACCESS\"}}}"
                  type: string
                  deprecated: false
                emailId:
                  description: The email addresses that should ne notified when the
                    objects are shared.
                  default: []
                  type: array
                  items:
                    type: string
                  deprecated: false
                notify:
                  description: When set to true, a notification is sent to the users
                    after an object is shared.
                  default: true
                  type: boolean
                  deprecated: false
                message:
                  description: The message text to send in the notification email.
                  type: string
                  deprecated: false
                includeCustomEmbedUrl:
                  description: When set to true, ThoughtSpot sends a link with the
                    host application context to allow users to access the shared object
                    from their ThoughtSpot embedded instance.
                  default: false
                  type: boolean
                  deprecated: false
              required:
              - type
              - id
              - permission
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/security/share/visualization":
    post:
      operationId: Share visualization
      description: "If you want to share a specific visualization from a Liveboard
        with another user or user group, then use this endpoint. \n\nRequires privilege
        to share the visualization"
      tags:
      - Security
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  description: A JSON array of the GUIDs of the objects to be shared
                  type: string
                  deprecated: false
                vizId:
                  description: The GUID of visualization
                  type: string
                  deprecated: false
                principalId:
                  description: The GUID of the users and user groups with which you
                    want to share the visualization
                  type: array
                  items:
                    type: string
                  deprecated: false
                emailId:
                  description: The email addresses that should ne notified when the
                    objects are shared
                  default: []
                  type: array
                  items:
                    type: string
                  deprecated: false
                notify:
                  description: 'When set to true, a notification is sent to the users
                    after an object is shared. '
                  default: true
                  type: boolean
                  deprecated: false
                message:
                  description: The message text to send in the notification email.
                  type: string
                  deprecated: false
                includeCustomEmbedUrl:
                  description: 'When set to true, ThoughtSpot sends a link with the
                    host application context to allow users to access the shared object
                    from their ThoughtSpot embedded instance. '
                  default: false
                  type: boolean
                  deprecated: false
              required:
              - id
              - vizId
              - principalId
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/security/permission/tsobject/search":
    post:
      operationId: Search permission on objects
      description: "To list the permissions for user and user groups on a list of
        objects, use this endpoint. The response will include only those users and
        groups with have either VIEW OR MODIFY permission. \n\nYou can either provide
        list of object ids or type of objects to list the permissions for. One of
        these inputs is mandatory. If both are provided then only object ids will
        be considred. \n\nYou can optionally provide users or user groups for which
        the persmission needs to be displayed. \n\nYou can optionally see the permission
        on the dependent objects as well by enabling includeDependent field. \n\nRequires
        administration privilege"
      tags:
      - Security
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tsObject:
                  description: A JSON Array of GUIDs and type of metadata object.
                  type: array
                  items:
                    "$ref": "#/components/schemas/TsObjectSearchInput"
                  deprecated: false
                principal:
                  description: A JSON array of principal names or GUIDs. When both
                    are given then id is considered.
                  type: array
                  items:
                    "$ref": "#/components/schemas/UserNameAndIDInput"
                  deprecated: false
                includeDependent:
                  description: When this field is set to true, the API response includes
                    the permission details for the dependent objects.
                  default: false
                  type: boolean
                  deprecated: false
              required:
              - tsObject
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/SecurityPermissionResponse"
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/tspublic/rest/v2/security/permission/principal/search":
    post:
      operationId: Search permission for principals
      description: "To list the permissions for user and user groups on a list of
        objects, use this endpoint. The response will include only those users and
        groups with have either VIEW OR MODIFY permission. \n\nYou can either provide
        list of object ids or type of objects to list the permissions for. One of
        these inputs is mandatory. If both are provided then only object ids will
        be considred. \n\nYou can optionally provide users or user groups for which
        the persmission needs to be displayed. \n\nYou can optionally see the permission
        on the dependent objects as well by enabling includeDependent field. \n\nRequires
        administration privilege"
      tags:
      - Security
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                principal:
                  description: A JSON array of principal names or GUIDs to be included
                    in the request. When both are given then id is considered.
                  type: array
                  items:
                    "$ref": "#/components/schemas/UserNameAndIDInput"
                  deprecated: false
                tsObject:
                  description: A JSON Array of GUIDs and type of metadata object.
                  type: array
                  items:
                    "$ref": "#/components/schemas/TsObjectSearchInput"
                  deprecated: false
              required:
              - principal
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/PrincipalSearchResponse"
        '500':
          description: Operation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
    SessionLoginResponse:
      type: object
      properties:
        userName:
          type: string
          description: Username of the user account for which token is generated
        token:
          type: string
          description: Bearer token generated. This will be blank when token type
            is Cookie
        tokenCreatedTime:
          type: string
          description: Date and time at which the token is generated
        tokenExpiryDuration:
          type: string
          description: Duration in seconds after which the token expires
        tokenType:
          type: string
          description: Type of token generated
      description: Login response
    GroupNameAndIDInput:
      type: object
      properties:
        name:
          type: string
          description: Name of the group
        id:
          type: string
          description: GUID of the group
    GroupNameAndID:
      type: object
      properties:
        name:
          type: string
          description: Name of the group
        id:
          type: string
          description: GUID of the group
    UserNameAndID:
      type: object
      properties:
        name:
          type: string
          description: Username of the user
        id:
          type: string
          description: GUID of the user
    UserNameAndIDInput:
      type: object
      properties:
        name:
          type: string
          description: Username of the user
        id:
          type: string
          description: GUID of the user
    UserResponse:
      type: object
      properties:
        name:
          type: string
          description: Username of the user account
        displayName:
          type: string
          description: Display name of the user account
        id:
          type: string
          description: GUID of the user account
        visibility:
          type: string
          description: Visibility of the user account
        mail:
          type: string
          description: Email of the user account
        groups:
          type: array
          items:
            "$ref": "#/components/schemas/GroupNameAndID"
          description: Name of the group to which user account is added
        privileges:
          type: array
          items:
            type: string
          description: Privileges assigned to user account
        #orgs:
          #type: array
          #items:
            #"$ref": "#/components/schemas/OrgType"
          #description: The organizations that user belongs to
        tags:
          type: array
          items:
            type: string
          description: Tags assigned to the user
        state:
          type: string
          description: Indicates if the user account is active or inactive
        notifyOnShare:
          type: boolean
          description: Indicates if the email should be sent when object is shared
            with the user
        showWalkMe:
          type: boolean
          description: Indicates if the walk me should be shown when logging in
        analystOnboardingComplete:
          type: boolean
          description: Indicates if the onboarding is completed for the user
        firstLogin:
          type: integer
          format: int32
          description: Indicates if the use is logging in for the first time
        welcomeEmailSent:
          type: boolean
          description: Indicates if the welcome email is sent to email associated
            with the user account
        isDeleted:
          type: boolean
          description: Indicates if the user account is deleted
        isHidden:
          type: boolean
          description: Indicates if the user account is hidden
        isExternal:
          type: boolean
          description: |-
            Indicates if the user account is from external system
            isDeprecated
        isDeprecated:
          type: boolean
        complete:
          type: boolean
          description: Indicates if the all the properties of user account is provided
        isSuperUser:
          type: boolean
          description: Indicates if the user account is super user
        isSystemPrincipal:
          type: boolean
          description: Indicates if the user account is system principal
        type:
          type: string
          description: Indicates the type of user account
        parenttype:
          type: string
          description: Indicates the type of parent object
        tenantId:
          type: string
          description: Tenant id associated with the user account
        indexVersion:
          type: number
          format: float
        generationNum:
          type: number
          format: float
        created:
          type: number
          format: float
          description: Date and time when user account was created
        modified:
          type: number
          format: float
          description: Date and time of last modification of user account
        author:
          "$ref": "#/components/schemas/UserNameAndID"
          description: Author of the user account
        modifiedBy:
          "$ref": "#/components/schemas/UserNameAndID"
          description: The user which last modified the user account details
        owner:
          "$ref": "#/components/schemas/UserNameAndID"
          description: Owner of the user account
    PinboardDetails:
      type: object
      properties:
        pinboardId:
          type: string
          description: pinboard id of recently pinned pinboard
        pinboardName:
          type: string
          description: pinboard name of recently pinned pinboard
        tabId:
          type: string
          description: tab id of recently pinned tab
        tabName:
          type: string
          description: tab name of recently pinned tab
    GroupResponse:
      type: object
      properties:
        name:
          type: string
          description: Name of the group
        displayName:
          type: string
          description: A unique display name string for the user group
        id:
          type: string
          description: GUID of the group
        visibility:
          type: string
          description: Visibility of the group
        description:
          type: string
          description: Description of the group
        privileges:
          type: array
          items:
            type: string
          description: Privileges assigned to the group
        #orgs:
          #type: array
          #items:
            #"$ref": "#/components/schemas/OrgType"
          #description: The organizations that user belongs to
        groups:
          type: array
          items:
            "$ref": "#/components/schemas/GroupNameAndID"
          description: Name of the group to which is added
        users:
          type: array
          items:
            "$ref": "#/components/schemas/UserNameAndID"
          description: User Group Information by Id or Name.
        assignedLiveboards:
          type: array
          items:
            "$ref": "#/components/schemas/LiveboardNameAndID"
          description: Liveboards assigned to the group
        userGroupContent:
          type: object
        tags:
          type: array
          items:
            type: string
          description: Tags assigned to the group
        isDeleted:
          type: boolean
          description: Indicates if the group is deleted
        isHidden:
          type: boolean
          description: Indicates if the group is hidden
        isExternal:
          type: boolean
          description: Indicates if the group is from external system
        isDeprecated:
          type: boolean
        complete:
          type: boolean
          description: Indicates if the all the properties of group is provided
        isSystemPrincipal:
          type: boolean
          description: Indicates if the group is system principal
        type:
          type: string
          description: Indicates the type of group
        parenttype:
          type: string
          description: Indicates the type of parent object
        groupIdx:
          type: integer
          format: int32
        metadataVersion:
          type: integer
          format: int32
        tenantId:
          type: string
          description: Tenant id associated with the group
        indexVersion:
          type: number
          format: float
        generationNum:
          type: number
          format: float
        created:
          type: number
          format: float
          description: Date and time when group was created
        modified:
          type: number
          format: float
          description: Date and time of last modification of the group
        author:
          "$ref": "#/components/schemas/UserNameAndID"
          description: Author of user group
        modifiedBy:
          "$ref": "#/components/schemas/UserNameAndID"
          description: The user which last modified the user group details
        owner:
          "$ref": "#/components/schemas/UserNameAndID"
          description: The owner of the user group
    LiveboardNameAndID:
      type: object
      properties:
        name:
          type: string
          description: Name of the liveboard
        id:
          type: string
          description: GUID of the liveboard
    MetadataTagResponse:
      type: object
      properties:
        name:
          type: string
          description: Name of the tag
        id:
          type: string
          description: GUID of the tag
        clientState:
          "$ref": "#/components/schemas/ClientState"
          description: State associated with the tag
        indexVersion:
          type: number
          format: float
        generationNum:
          type: number
          format: float
        isDeleted:
          type: boolean
          description: Indicates if the tag is deleted
        isHidden:
          type: boolean
          description: Indicates if the tag is hidden
        isExternal:
          type: boolean
          description: Indicates if the tag is from external system
        isDeprecated:
          type: boolean
        created:
          type: number
          format: float
          description: Date and time when group was created
        modified:
          type: number
          format: float
          description: Date and time of last modification of the group
        modifiedBy:
          "$ref": "#/components/schemas/TagNameAndID"
          description: The user which last modified the tag details
        author:
          "$ref": "#/components/schemas/TagNameAndID"
          description: Author of tag
        owner:
          "$ref": "#/components/schemas/TagNameAndID"
          description: The owner of the tag
    ClientState:
      type: object
      properties:
        color:
          type: string
          description: Color assigned to the tag
    TagNameAndID:
      type: object
      properties:
        name:
          type: string
          description: Name of the group to which group  is added
        id:
          type: string
          description: GUID of the group to which group  is added
    TsObjectInput:
      type: object
      required:
      - id
      - type
      properties:
        id:
          type: string
          description: GUID of the metadata object
        type:
          type: string
          enum:
          - ANSWER
          - LIVEBOARD
          - DATAOBJECT
          - CONNECTION
          description: Type of the metadata object
    HomeLiveboardResponse:
      type: object
      properties:
        userName:
          type: string
          description: Name of the user
        userId:
          type: string
          description: The GUID of the user
        liveboardName:
          type: string
          description: Name of the liveboard
        liveboardId:
          type: string
          description: The GUID of the liveboard
    AccessLevelInput:
      type: object
      properties:
        name:
          type: string
          description: Username or name of the user group
        id:
          type: string
          description: GUID of the user or user group
        type:
          type: string
          enum:
          - USER
          - USER_GROUP
          description: Type of access detail provided
        access:
          type: string
          enum:
          - READ_ONLY
          - MODIFY
          description: Minimum access level that the specified user or user group
            has. If no input is provided then minimum access of READ_ONLY will be
            considered.
    TagNameAndIdInput:
      type: object
      properties:
        name:
          type: string
          description: Name of the tags
        id:
          type: string
          description: GUID of the tags
    NameAndIdInput:
      type: object
      properties:
        name:
          type: string
          description: Name of the user
        id:
          type: string
          description: GUID of the user
    ConnectionResponse:
      type: object
      properties:
        name:
          type: string
          description: Name of the connection
        description:
          type: string
          description: Description associated with the connection
        type:
          type: string
          description: Type of the connection. The database associated with this type
            can be obtained from the response returned by the /tspublic/rest/v2/connection/types
            API endpoint.
        id:
          type: string
          description: GUID of the connection
        scheduled:
          type: boolean
          description: Indicates if the data sync is scheduled for this connection
        connectionType:
          type: string
        configuration:
          type: string
          description: Configuration properties of the connection
        isExternal:
          type: boolean
        isDeprecated:
          type: boolean
          description: Indicates if the connection is deprecated
        isDeleted:
          type: boolean
          description: Indicates if the connection is deleted
        isHidden:
          type: boolean
          description: Indicates if the connection is hideen
        complete:
          type: boolean
          description: Indicates if the all the properties of connection is provided
        indexVersion:
          type: number
          format: float
        generationNum:
          type: number
          format: float
        created:
          type: string
          description: Date and time when the connection was created
        modified:
          type: string
          description: Date and time of last modification of the connection
        author:
          "$ref": "#/components/schemas/UserNameAndID"
          description: Author of the connection
        modifiedBy:
          "$ref": "#/components/schemas/UserNameAndID"
          description: The user which last modified the connection details
        owner:
          "$ref": "#/components/schemas/UserNameAndID"
          description: The owner of the connection
        tags:
          type: array
          items:
            type: string
          description: List of tags assigned to the connection
        tables:
          type: array
          items:
            "$ref": "#/components/schemas/tableList"
          description: List of tables linked to this connection
    CreateConnectionResponse:
      type: object
      properties:
        name:
          type: string
          description: Name of the connection
        description:
          type: string
          description: Description associated with the connection
        type:
          type: string
          description: Type of the connection. The database associated with this type
            can be obtained from the response returned by the /tspublic/rest/v2/connection/types
            API endpoint.
        id:
          type: string
          description: GUID of the connection
        scheduled:
          type: boolean
          description: Indicates if the data sync is scheduled for this connection
        connectionType:
          type: string
        configuration:
          type: string
          description: Configuration properties of the connection
        isExternal:
          type: boolean
        isDeprecated:
          type: boolean
          description: Indicates if the connection is deprecated
        isDeleted:
          type: boolean
          description: Indicates if the connection is deleted
        isHidden:
          type: boolean
          description: Indicates if the connection is hideen
        complete:
          type: boolean
          description: Indicates if the all the properties of connection is provided
        indexVersion:
          type: number
          format: float
        generationNum:
          type: number
          format: float
        created:
          type: string
          description: Date and time when user account was created
        modified:
          type: string
          description: Date and time of last modification of user account
        author:
          "$ref": "#/components/schemas/UserNameAndID"
          description: Author of user account
        modifiedBy:
          "$ref": "#/components/schemas/UserNameAndID"
          description: The user which last modified the user account details
        owner:
          "$ref": "#/components/schemas/UserNameAndID"
          description: The owner of the user account
        tags:
          type: array
          items:
            type: string
          description: List of tags assigned to the connection
        tables:
          type: array
          items:
            type: string
          description: List of tables linked to this connection and details of the
            columns in the table
    AddTableInput:
      type: object
      required:
      - name
      - dbName
      - schemaName
      - columns
      properties:
        name:
          type: string
          description: Name of the table
        dbName:
          type: string
          description: Name of the database in the data platform
        schemaName:
          type: string
          description: Name of the schema in the database
        columns:
          type: array
          items:
            "$ref": "#/components/schemas/ColumnsInput"
          description: A JSON array of column details
    TableInput:
      type: object
      properties:
        name:
          type: string
          description: Name of the table
        id:
          type: string
          description: GUID of the Table
    ConnectionTableResponse:
      type: object
      properties:
        id:
          type: string
          description: Connection id
        database:
          type: array
          items:
            "$ref": "#/components/schemas/ConnectionDatabaseType"
          description: List of databases
    ConnectionTableColumnsResponse:
      type: object
      properties:
        id:
          type: string
          description: Connection id
        table:
          type: array
          items:
            "$ref": "#/components/schemas/ConnectionColumnsShema"
          description: List of table details
    AnswerQueryResponse:
      type: object
      properties:
        name:
          type: string
          description: The name of the saved Answer
        id:
          type: string
          description: The GUID of the saved Answer
        querySql:
          type: string
          description: SQL query associated with the saved Answer
    LiveboardQueryResponse:
      type: object
      properties:
        name:
          type: string
          description: The name of the Liveboard
        id:
          type: string
          description: The GUID of the Liveboard
        viz:
          type: array
          items:
            "$ref": "#/components/schemas/VizType"
          description: SQL query associated with the saved Answer
    FromUserNameAndIDInput:
      type: object
      properties:
        name:
          type: string
          description: Username of the user
        id:
          type: string
          description: GUID of the user
      description: "A JSON object of name or GUIDs of the current owner of the objects.
        When both are given then id is considered. \n\nIf a list of object ids are
        provided as input for TsObjectId, then only for those ids that have owner
        as the value provided in fromUser, the owner will be changed. \n\nProvide
        either name or id as input. When both are given user id will be considered."
    ToUserNameAndIDInput:
      type: object
      properties:
        name:
          type: string
          description: Username of the user
        id:
          type: string
          description: GUID of the user
      description: A JSON object of name or GUIDs of the new owner for the objects.
        When both are given then id is considered.
    AdminsyncPrincipalResponse:
      type: object
      properties:
        usersAdded:
          type: array
          items:
            type: string
          description: Username of list of users added
        usersDeleted:
          type: array
          items:
            type: string
          description: Username of list of users deleted
        usersUpdated:
          type: array
          items:
            type: string
          description: Username of list of users updated
        groupsAdded:
          type: array
          items:
            type: string
          description: Group name of list of groups added
        groupsDeleted:
          type: array
          items:
            type: string
          description: Group name of list of groups deleted
        groupsUpdated:
          type: array
          items:
            type: string
          description: Group name of list of groups updated
    pdfOptionsInput:
      type: object
      properties:
        orientation:
          type: string
          enum:
          - PORTRAIT
          - LANDSCAPE
          description: 'Page orientation for the PDF. Default: PORTRAIT'
        truncateTables:
          type: boolean
          description: "When set to true, only the first page of the tables is displayed
            in the file. \n\nThis setting is applicable only when generating report
            for specific visualization ids. Default: false"
        includeLogo:
          type: boolean
          description: 'Include customized wide logo if available in the footer. Default:
            true'
        footerText:
          type: string
          description: Footer text to include in the footer of each page of the PDF.
        includePageNumber:
          type: boolean
          description: 'When set to true, the page number is included in the footer
            of each page. Default: true'
        includeCoverPage:
          type: boolean
          description: 'When set to true, a cover page with the Liveboard title is
            added in the PDF. Default: true'
        includeFilterPage:
          type: boolean
          description: 'When set to true, a second page with a list of all applied
            filters is added in the PDF. Default: true'
    LogsResponse:
      type: object
      properties:
        date:
          type: string
          description: Date and time for the event in the log
        log:
          type: string
          description: Logged event at the time specified in JSON format. This includes,
            Event ID, A unique description of the event, for example, User login failed,
            Timestamp, User ID of the person initiating the event and IP address of
            the ThoughtSpot instance.
    TsObjectSearchInput:
      type: object
      required:
      - type
      - id
      properties:
        type:
          type: string
          enum:
          - LIVEBOARD
          - ANSWER
          - DATAOBJECT
          - COLUMN
          description: Type of the metadata objec
        id:
          type: array
          items:
            type: string
          description: A JSON Array of GUIDs of the metadata object
    SecurityPermissionResponse:
      type: object
      properties:
        id:
          type: string
          description: GUID of the object
        name:
          type: string
          description: Name of the object
        type:
          type: string
          description: Indicates the type of the object
        owner:
          type: string
          description: GUID of the owner of the object
        author:
          "$ref": "#/components/schemas/UserNameAndID"
          description: Author of the object
        permissions:
          type: array
          items:
            "$ref": "#/components/schemas/SecurityPermission"
          description: An array of object with details of permission on users and
            user groups
        dependents:
          type: array
          items:
            "$ref": "#/components/schemas/SecuirityDependents"
          description: The objects on which the primary object is dependent on
    PrincipalSearchResponse:
      type: object
      properties:
        id:
          type: string
          description: GUID of the user or user group
        name:
          type: string
          description: Name of the user or user group
        type:
          type: string
          description: Indicates the type of principal
        permissions:
          type: array
          items:
            "$ref": "#/components/schemas/PermissionsTypeSearch"
          description: Indicates the permission which user or user group has on the
            object
    CreateTableResponse:
      type: object
      properties:
        logicalTableHeader:
          "$ref": "#/components/schemas/LogicalTableHeader"
        physicalTableId:
          type: string
    ConnectionTableColumnsInput:
      type: object
      required:
      - dbName
      - schemaName
      - name
      properties:
        dbName:
          type: string
          description: Name of the database
        schemaName:
          type: string
          description: Name of the schema
        name:
          type: string
          description: Name of the table
    #OrgType:
      #type: object
      #properties:
        #name:
          #type: string
          #description: Name of the organization
        #id:
          #type: integer
          #format: int32
          #description: Id of the organization
    tableList:
      type: object
      properties:
        name:
          type: string
          description: Name of the table
        type:
          type: string
          description: Type of the table
        id:
          type: string
          description: GUID of the table
        databaseStripe:
          type: string
          description: Name of the database to which the table belongs
        schemaStripe:
          type: string
          description: Name of the schema to which the table belongs
        isExternal:
          type: boolean
        isDeprecated:
          type: boolean
          description: Indicates if the table is deprecated
        isDeleted:
          type: boolean
          description: Indicates if the table is deleted
        isHidden:
          type: boolean
          description: Indicates if the table is hideen
        indexVersion:
          type: number
          format: float
        generationNum:
          type: number
          format: float
        created:
          type: string
          description: Date and time when the table was created
        modified:
          type: string
          description: Date and time of last modification of the table
        author:
          "$ref": "#/components/schemas/UserNameAndID"
          description: Author of the table
        modifiedBy:
          "$ref": "#/components/schemas/UserNameAndID"
          description: The user which last modified the table details
        owner:
          "$ref": "#/components/schemas/UserNameAndID"
          description: The owner of the tabe
        tags:
          type: array
          items:
            type: string
          description: List of tags assigned to the table
    ColumnsInput:
      type: object
      required:
      - name
      - dataType
      properties:
        name:
          type: string
          description: Name of the column
        dataType:
          type: string
          description: Datatype of the column
    ConnectionDatabaseType:
      type: object
      properties:
        name:
          type: string
          description: Name of the database
        schema:
          type: array
          items:
            "$ref": "#/components/schemas/ConnectionTableSchema"
          description: List of schemas
    ConnectionColumnsShema:
      type: object
      properties:
        name:
          type: string
          description: Name of the table
        dbName:
          type: string
          description: Name of the database
        schemaName:
          type: string
          description: Name of the schema
        columns:
          type: array
          items:
            "$ref": "#/components/schemas/TableColumns"
          description: List of columns in the table
    VizType:
      type: object
      properties:
        name:
          type: string
          description: The name of the visualization
        id:
          type: string
          description: The GUID of the visualization
        querySql:
          type: string
          description: SQL query associated with the visualization
    SecurityPermission:
      type: object
      properties:
        id:
          type: string
          description: GUID of the user or user group
        name:
          type: string
          description: Name of the user or user group
        type:
          type: string
          description: Indicates the type of principal
        permission:
          type: string
          description: Indicates the permission which user or user group has on the
            object
        sharedPermission:
          type: string
          description: Indicates the permission which user or user group has on the
            object through sharing of the object with this user or user group
        groupPermission:
          type: array
          items:
            "$ref": "#/components/schemas/GroupPermission"
          description: An array of object with details of permission on the user groups
            to which the user or user group belongs
    SecuirityDependents:
      type: object
      properties:
        id:
          type: string
          description: GUID of the object
        name:
          type: string
          description: Name of the object
        type:
          type: string
          description: Indicates the type of the object
        owner:
          type: string
          description: Owner of the object
        author:
          "$ref": "#/components/schemas/UserNameAndID"
          description: Author of the object
        permissions:
          type: array
          items:
            "$ref": "#/components/schemas/DependentPermission"
    PermissionsTypeSearch:
      type: object
      properties:
        type:
          type: string
          description: Indicates the type of the object
        tsObject:
          type: array
          items:
            "$ref": "#/components/schemas/TsObjectTypeSerach"
          description: An array of objects of type mentioned in type field
    LogicalTableHeader:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        author:
          type: string
        authorName:
          type: string
        authorDisplayName:
          type: string
        created:
          type: number
          format: float
        modified:
          type: number
          format: float
        modifiedBy:
          type: string
        generationNum:
          type: integer
          format: int32
        owner:
          type: string
        deleted:
          type: boolean
        hidden:
          type: boolean
        database:
          type: string
        schema:
          type: string
        type:
          type: string
        subType:
          type: string
    ConnectionTableSchema:
      type: object
      properties:
        name:
          type: string
          description: Name of the schema
        table:
          type: array
          items:
            "$ref": "#/components/schemas/ConnectionColumn"
          description: List of table details
    TableColumns:
      type: object
      properties:
        name:
          type: string
          description: Name of the column
        dataType:
          type: string
          description: Datatype of the column
    GroupPermission:
      type: object
      properties:
        id:
          type: string
          description: GUID of the user group
        name:
          type: string
          description: Name of the user group
        permission:
          type: string
          description: Indicates the permission which user group has on the object
    DependentPermission:
      type: object
      properties:
        id:
          type: string
          description: GUID of the object
        name:
          type: string
          description: Name of the object
        type:
          type: string
          description: Indicates the type of the object
        permission:
          type: string
          description: Indicates the permission which user or user group has on the
            object
        sharedPermission:
          type: string
          description: Indicates the permission which user or user group has on the
            object through sharing of the object with this user or user group
        groupPermission:
          type: array
          items:
            "$ref": "#/components/schemas/GroupPermission"
          description: An array of object with details of permission on the user groups
            to which the user or user group belongs
    TsObjectTypeSerach:
      type: object
      properties:
        id:
          type: string
          description: GUID of the object
        name:
          type: string
          description: Name of the object
        owner:
          type: string
          description: Owner of the object
        author:
          "$ref": "#/components/schemas/UserNameAndID"
          description: Author of the object
        permission:
          type: string
          description: Indicates the permission which user or user group has on the
            object
        sharedPermission:
          type: string
          description: Indicates the permission which user or user group has on the
            object through sharing of the object with the user or user group
        groupPermission:
          type: array
          items:
            "$ref": "#/components/schemas/GroupPermission"
          description: An array of object with details of permission on the user groups
            to which the user or user group belongs
    ConnectionColumn:
      type: object
      properties:
        name:
          type: string
          description: Name of the table
        type:
          type: string
          description: Type of the Table
        column:
          type: array
          items:
            "$ref": "#/components/schemas/TableColumns"
          description: List of columns in the table
